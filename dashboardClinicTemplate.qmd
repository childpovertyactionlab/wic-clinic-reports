---
title: "WIC Clinic Dashboard"
title-block-banner: TRUE
fig-width: 9
fig-height: 5
fig-dpi: 300
warning: FALSE
error: TRUE
echo: FALSE
message: FALSE
params:
  clinic_name: "Highland Hills"
format: html
editor: source
---


<!--

## DASHBOARD TEMPLATE ##

This template for clinic dashboards is in the following order:
 1. Dynamic text generations
 2. Visualization generations
 3. Layout of dashboard using variables from generations
 
-->

```{r setup, echo=FALSE, output=FALSE}
library(tidyverse)
library(googlesheets4)
library(tsutils)
library(plotly)
library(readxl)
library(glue)
library(stringr)
library(waffle)
library(forecast)
library(tsibble)
library(cpaltemplates)
<<<<<<< HEAD
<<<<<<< Updated upstream
library(sparklines)

clinic_name = params$clinic_name

files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
=======

clinic_name = params$clinic_name

data_dir <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/"

files <- list.files(path = data_dir, pattern = "\\.csv$")
>>>>>>> Stashed changes
=======

clinic_name = params$clinic_name

data_dir <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/"

files <- list.files(path = data_dir, pattern = "\\.csv$")
>>>>>>> test

for (file in files) {
  file_name <- tools::file_path_sans_ext(file)
  if (file_name == "ptcp") {
<<<<<<< HEAD
<<<<<<< Updated upstream
    assign(gsub("__", "\\.", file_name), read_csv(file = paste0("data/scriptData/", file)) %>%
             rename(Date = colnames(.)[1]) %>%
             mutate(Date = as.Date(Date)))
  } else {
    assign(gsub("__", "\\.", file_name), read_csv(file = paste0("data/scriptData/", file)))
=======
    assign(gsub("__", "\\.", file_name), read_csv(file = paste0(data_dir, file)) %>%
             rename(Date = colnames(.)[1]) %>%
             mutate(Date = as.Date(Date)))
  } else {
    assign(gsub("__", "\\.", file_name), read_csv(file = paste0(data_dir, file)))
>>>>>>> Stashed changes
=======
    assign(gsub("__", "\\.", file_name), read_csv(file = paste0(data_dir, file)) %>%
             rename(Date = colnames(.)[1]) %>%
             mutate(Date = as.Date(Date)))
  } else {
    assign(gsub("__", "\\.", file_name), read_csv(file = paste0(data_dir, file)))
>>>>>>> test
  }
}

clinic_id = clinic_map %>%
  filter(Clinic == clinic_name) %>%
  pull(Site) %>%
  as.character

## make sure poppins is installed locally
poppins_import()

set_cpal_defaults()

bold_color <- function(text, color) {
  paste0("<b style='color:", color, "'>", text, "</b>")
}

# high performance threshold for POEs (90%)
threshold = 0.9

# fail threshold (50%)
fail = 0.5

# maximum acceptable num. families in waiting room at once
maxFamiliesWaiting = 8

# dynamic text prep
oxford_comma <- function(x) {
  if (length(x) > 2) {
    paste(paste(x[-length(x)], collapse=", "), "and", x[length(x)])
  } else {
    paste(x, collapse=" and ")
  }
}

current_date <- Sys.Date()
current_year <- as.integer(format(Sys.Date(), "%Y"))
current_month <- as.integer(format(Sys.Date(), "%m"))

```


<!--
Set aside numbers of families waiting, specify phases
-->

```{r preprocess, echo=FALSE, output=FALSE}
df.familiesWaiting <- df %>% 
  select(Site, Date, `# of Families Waiting`) %>%
  rename(familiesWaiting = `# of Families Waiting`) %>%
  drop_na()

df <- df %>%
  mutate(`# of Families Waiting` = 1 / exp(`# of Families Waiting` / maxFamiliesWaiting))

df.phase <- df %>%
  select(-Clinic, -Manager) %>%
  group_by(Site) %>%
  replace(is.na(.), 0) %>% 
  pivot_longer( cols = -c(1:2), names_to = "variable", values_to = "score") %>%
  left_join(POE, by = "variable") %>%
  group_by(Site, Date, phase) %>%
  summarise(score = mean(score, na.rm = TRUE)) %>%
  pivot_wider(names_from = phase, values_from = score) %>%
  rename_with(~ifelse(grepl("^\\d+$", .), paste0("phase", .), .), -c(Site, Date))
```

```{=html}
<!--
Summarize POE data from individual criteria into categories and even wider themes
-->
```
```{r categories, echo=FALSE, output=FALSE}

df.grouped.long <- df %>%
  select(-Clinic, -Manager) %>%
  pivot_longer(
    cols = -c(Site, Date), 
    names_to = "variable", 
    values_to = "value"
  ) %>%
  merge(POE, by = "variable") %>%
  group_by(Site, Date, category) %>%
  summarise(Value = mean(value, na.rm = TRUE), .groups = "drop")
  
df.grouped <- df.grouped.long %>% 
  pivot_wider(
    names_from = category, 
    values_from = Value
  )

##  THEMES DF
df.themes.long <- df %>%
  select(-Clinic, -Manager) %>%
  pivot_longer(
    cols = -c(Site, Date), 
    names_to = "variable", 
    values_to = "value"
  ) %>%
  merge(POE, by = "variable") %>%
  group_by(Site, Date, theme) %>%
  summarise(Value = mean(value, na.rm = TRUE), .groups = "drop")
  
df.themes <- df.themes.long %>% 
  pivot_wider(
    names_from = theme, 
    values_from = Value
  )

```

```{=html}
<!--
Snapshot of only the most recent data to see current fulfillment
-->
```
```{r snapshot, echo=FALSE, output=FALSE}
##  DETAILED RECENT SNAPSHOT
df.recent <- df %>%
  group_by(Site) %>%
  slice(which.max(Date)) %>%
  select(-c("Date"))

##  GROUPED RECENT SNAPSHOT
df.recent.grouped <- df.grouped %>%
  group_by(Site) %>%
  slice(which.max(Date)) %>%
  select(-c("Date"))

##  THEMED RECENT SNAPSHOT
df.recent.themes <- df.themes %>%
  group_by(Site) %>%
  slice(which.max(Date)) %>%
  select(-c("Date"))

### long form of themes for radar charts later
df.recent.themes.long <- df.recent.themes %>%
  pivot_longer(cols = starts_with(c("Hospitality", "Communication", "Layout", "Efficiency", "Safety")),
               names_to = "Theme",
               values_to = "Value")

```


<!--
AGENCY-WIDE PREPROCESSING STOPS HERE -- BELOW ARE GENERATIONS
-->


<!--
Generate dynamic text that: 
 - separates into themes
 - determines strengths based on 'threshold'
 - determines fails based on 'fail'
 PRODUCT: "phase_text"
-->

```{r phasetext, echo=FALSE, output=FALSE}
df.phase.clinic <- df.phase %>%
  # ungroup() %>%
  # mutate_if(is.numeric, ~./(ncol(.) - 2)) %>%
  filter(Site == clinic_id)

phase_eval <- df.phase.clinic %>%
  filter(Date == max(df.phase.clinic$Date)) %>%
  ungroup() %>% select(-c(Site, Date)) %>% 
  gather(key = "phase", value = "metric") %>%
  mutate(phase = gsub("(phase)(\\d+)", "Phase \\2", phase),
         evaluation = if_else(metric > threshold,
                              "fulfilled",
                              "not_fulfilled"))

# create grouped phase strings
phase_eval.strong <- phase_eval %>% filter(evaluation == "fulfilled") %>% mutate(colored_phase = paste0("<span style='color:", palette_cpal_main[stringr::str_remove(phase, "Phase ")],"'>", phase, "</span>")) %>% pull(colored_phase) %>% paste(collapse = ", ")
phase_eval.weak <- phase_eval %>% filter(evaluation == "not_fulfilled") %>% mutate(colored_phase = paste0("<span style='color:", palette_cpal_main[stringr::str_remove(phase, "Phase ")],"'>", phase, "</span>")) %>% pull(colored_phase) %>% paste(collapse = ", ")

# Use your oxford_comma function to make it look better
phase_eval.strong <- oxford_comma(strsplit(phase_eval.strong, ", ")[[1]])
phase_eval.weak <- oxford_comma(strsplit(phase_eval.weak, ", ")[[1]])

phase_text <- paste(if (nchar(phase_eval.strong) > 0) 
                             paste0("Nice job getting ", phase_eval.strong, " fulfillment above ", "<span style='color:#2f2f2f'>", sprintf("%.f%%", threshold*100), "</span>", "!"),
                           if (nchar(phase_eval.weak) > 0) 
                             paste0("Work on getting ", phase_eval.weak, " targets up."))
```


<!--
Generate dynamic text that:
 - counts how many POE fails there are by phase
 - if there are 5 or fewer, lists them all
 - if there are more than 5, picks 5 at random to serve as monthly targets
 PRODUCT: "improvement_text"
-->

```{r improvement_targets, echo=FALSE, output=FALSE}
df.recent.long <- df.recent %>%
  select(-Clinic, -Manager) %>%
  pivot_longer(cols = -c(1),
               names_to = "variable",
               values_to = "Value") %>%
  merge(POE, by = "variable") %>%
  select(Site, Value, improvement_phrase, phase)

df.clinic_fails <- df.recent.long %>%
  filter(Site == clinic_id, Value < fail)

fail_count <- df.clinic_fails %>%
  count(phase) %>%
  mutate(name = paste0("Phase ", phase),
         color = palette_cpal_main[phase],
         message = glue_col("{n} items in <span style='color:{color}'>{name}</span>")) %>%
  pull(message)

fail_count_string <- paste(fail_count, collapse = ", ")

if(length(fail_count) > 1) {
  fail_count_string <- stringr::str_replace(fail_count_string, "\\,(?=[^,]*$)", " and")
}

improves <- df.clinic_fails %>% 
  { if(nrow(.) > 5) 
      slice_sample(., n = 5)
    else 
      .
  } %>% pull(improvement_phrase)

improvements_string <- paste0("\n\n - ", paste(improves, collapse = "\n\n - "))

improvement_text <- knitr::asis_output(glue(
  "The {clinic_name} clinic has {knitr::asis_output(fail_count_string)} that need improvement. 
  {if (length(improves) > 0) {
    paste('Here are some goals to focus on:', improvements_string)
  } else {
    'Wonderful work! You are a WIC superstar!'
  }}"
))

```


<!--
Generate dynamic text that:
 - summarizes recent performance by theme
 - separates strengths and fails
 PRODUCT: "performance_text"
-->

```{r themes, echo=FALSE, output=FALSE}
df.recent.themes.long.filtered <- df.recent.themes.long %>% filter(Site == clinic_id)

performance_text <- paste(
  if_else(length(strong_themes <- df.recent.themes.long.filtered %>% filter(Value > threshold) %>% pull(Theme) %>% tolower()) > 0,
    paste0("The ", clinic_name, " clinic is strong in ", oxford_comma(strong_themes), "."),
    ""),
  if_else(length(weak_themes <- df.recent.themes.long.filtered %>% filter(Value < fail) %>% pull(Theme) %>% tolower()) > 0,
    paste0("Focus on improving clinic ", oxford_comma(weak_themes), "."),
    "There aren't any particularly weak areasâ€”keep up the good work!")
)

```

```{=html}
<!--
Generate dynamic text that:
 - calculates vacancies by role
 - suggests staff hirings
 PRODUCT: "vacancy_text"
-->
```
```{r vacancies, echo=FALSE, output=FALSE}
summarize_role <- function(df, clinic_id, role) {
  df %>%
    filter(Site == clinic_id, Role == role) %>%
    summarize(
      Vacancies = sum(Vacant == "TRUE", na.rm = TRUE),
      Temps = sum(`In training` == "TRUE" | `Temp` == "TRUE" | `Part-time` == "TRUE" | `On leave` == "TRUE", na.rm = TRUE),
      `WCS trainees` = sum(`WCS trainee` == "TRUE", na.rm = TRUE),
      Active = n() - Vacancies - Temps,
      Role = role
    )
}

roles <- c("clerk", "certifier", "supervisor")
count_df <- purrr::map_dfr(roles, summarize_role, df = staff, clinic_id = clinic_id)

create_vacancy_sentence <- function(df) {
  if (!any(df$Vacancies > 0)) {
    return("There are no vacancies right now. Nice job!")
  }
  
  vacancy_df <- df %>%
    filter(Vacancies > 0) %>%
    mutate(
      RolePlural = ifelse(Vacancies > 1, paste0(Role, "s"), Role),
      RoleSentence = paste(Vacancies, RolePlural, "and")
    ) %>%
    summarise(vacancy_sentence = stringr::str_c(RoleSentence, collapse = " ")) %>%
    mutate(vacancy_sentence = stringr::str_remove(vacancy_sentence, " and$"))
    
  vacancy_sentence <- stringr::str_glue("Consider hiring {vacancy_df$vacancy_sentence} to meet staffing needs.")
  
  return(vacancy_sentence)
}

vacancy_text <- create_vacancy_sentence(count_df)
```

<!--
Generate dynamic text that:
 - qualtrics
 PRODUCT: "CSATtext"
-->

```{r CSATtext, echo=FALSE, output=FALSE}
CSAT.integrated <- CSAT %>%
  drop_na() %>%
  bind_rows(CSAT.predict) %>%
  arrange(Site, Date) %>%
  mutate(Date = floor_date(Date, "month"),
         `CSAT Points` = ifelse(is.na(`CSAT Points`), CSAT * `CSAT (n)`, `CSAT Points`)
         ) %>%
  group_by(Site) %>%
  do({
    firstP = first(.$`Running CSAT Points`)
    firstn = first(.$`Running CSAT n`)
    mutate(., `Running CSAT Points` = firstP + cumsum(`CSAT Points`),
           `Running CSAT n` = firstn + cumsum(`CSAT (n)`),) 
  }) %>%
  mutate(`Running CSAT Average` = `Running CSAT Points` / `Running CSAT n`)

CSAT.groups <- CSAT.integrated %>%
  filter(`CSAT (n)` != 0, !is.na(`CSAT (n)`)) %>%
  group_by(Date) %>%
  summarize_at(vars(LA_CSAT = CSAT, LA_avg = `Running CSAT Average`), list(~ mean(., na.rm=TRUE)))

CSAT.clinic <- CSAT %>%
  filter(Site == clinic_id) %>%
  mutate(Date = floor_date(Date, "month"), 
         Average = lag(`Running CSAT Average`, n = 1)) %>%
  select(Date, CSAT, CSAT_n = `CSAT (n)`, Average) %>%
  filter(!is.na(`Average`), !is.na(`CSAT`)) %>%
  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%
  left_join(CSAT.groups, by="Date")


CSAT.clinic.recent <- CSAT.clinic %>%
  arrange(desc(Date)) %>%
  slice(1:18) %>%
  mutate(pred = FALSE)

CSAT.clinic.predict <- CSAT.predict %>%
  filter(Site == clinic_id) %>%
  mutate(Date = floor_date(Date, "month")) %>%
  left_join(CSAT.integrated %>% select(Date, Site, Average = `Running CSAT Average`), by=c("Date", "Site")) %>%
  select(-c(Site), CSAT_n = `CSAT (n)`) %>%
  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%
  left_join(CSAT.groups, by="Date") %>%
  slice(1:2) %>%
  mutate(pred = TRUE)
  
CSAT.charting <- CSAT.clinic.recent %>%
  mutate(Date = as.Date(Date)) %>%
  arrange(Date) %>%
  bind_rows(CSAT.clinic.predict)

bettermonth = CSAT.clinic.recent$CSAT[1] > CSAT.clinic.recent$Average[1]

CSAT.text.clinic <- paste0("In ", format(CSAT.clinic.recent$Date[1], "%B %Y"), ", the customer satisfaction score was ", ifelse(bettermonth, " better", " worse"), " than the", clinic_name, " clinic's average.", ifelse(bettermonth, " Good work!", ""))

CSAT.all.now <- CSAT %>%
  drop_na() %>%
  filter(Date == max(Date))

CSAT.average.now <- sum(CSAT.all.now$`CSAT Points`) / sum(CSAT.all.now$`CSAT (n)`)

CSAT.text.agency <- paste0("Agency-wide, the ", clinic_name, " clinic brought the average for Dallas County clinics", ifelse(CSAT.clinic.recent$CSAT[1] > CSAT.average.now, " up. Nice!", " down. Keep working!"))

CSAT.text.trend <- paste0("Over the last 18 months, the score for ", clinic_name, " has ", ifelse(CSAT.clinic.recent$Average[1] > CSAT.clinic.recent$Average[18], " increased overall.", " decreased overall."), " Over the last 3 months, the score has ", ifelse(CSAT.clinic.recent$Average[1] > CSAT.clinic.recent$Average[3], " increased.", " decreased."))

CSAT.clinic.recent <- CSAT.clinic.recent %>% arrange(Date)

<<<<<<< HEAD
<<<<<<< Updated upstream
CSAT.sparkline <- sparkline(round(as.vector(CSAT.clinic.recent$Average), 4), "line", 
          list(lineColor = palette_cpal_teal[6],
               fillColor = palette_cpal_teal[2],
               width = "200px",
               height = "80px"))
=======
=======
>>>>>>> test
# CSAT.sparkline <- sparkline(round(as.vector(CSAT.clinic.recent$Average), 4), "line", 
#           list(lineColor = palette_cpal_teal[6],
#                fillColor = palette_cpal_teal[2],
#                width = "200px",
#                height = "80px"))
<<<<<<< HEAD
>>>>>>> Stashed changes
=======
>>>>>>> test

```

```{=html}
<!--
Generate radar chart that:
 - compares POE themes by fulfillment
 PRODUCT: "POEradar"
-->
```
```{r POEradar, echo=FALSE, output=FALSE}
POEradar <- plot_ly(df.recent.themes.long.filtered, 
                    r = ~Value, 
                    theta = ~Theme, 
                    type = 'scatterpolar', 
                    mode = "markers", 
                    fill = 'toself', 
                    hoverinfo = "none",
                    marker = list(color = palette_cpal_main[1]),
                    fillcolor = "rgba(0,128,151,0.5)") %>%
  layout(
    title = "",
    font = list(family = "Poppins"),
    plot_bgcolor = "rgba(0,0,0,0)",
    paper_bgcolor = "rgba(0,0,0,0)",
    polar = list(
      radialaxis = list(
        visible = T,
        showticklabels = F,
        range = c(0,1),
        linecolor = "rgba(0,0,0,0)",
        tickcolor = "rgba(0,0,0,0)"
      ),
       angularaxis = list(
        showticklabels = T
      )
    ),
    showlegend = F
  ) %>% 
  config(displayModeBar = F)

# make scaling obvious
# bold theme names
```

```{=html}
<!--
Generate area-under-the-line chart that:
 - shows POE fulfillment by phase over time
 PRODUCT: "POEarea"
-->
```
```{r POEarea, echo=FALSE, output=FALSE}
phase_cols <- grep("^phase", names(df.phase.clinic), value = TRUE)

POEarea <- NULL

for(i in seq_along(phase_cols)) {
  legend_name = sub("phase", "Phase ", phase_cols[i])
  if (is.null(POEarea)){
    POEarea <- plot_ly(df.phase.clinic, 
                      hoverinfo = "none",
                      x = ~Date, 
                      y = as.formula(paste0("~`", phase_cols[i], "`")),
                      name = legend_name, 
                      fill = 'tozeroy',
                      fillcolor = palette_cpal_main[phase_cols[i]],
                      type = 'scatter', 
                      mode = 'none')
  } else {
    POEarea <- POEarea %>%
      add_trace(y = as.formula(paste0("~`", phase_cols[i], "`")),
                name = legend_name, 
                fill = 'tozeroy',
                fillcolor = palette_cpal_main[phase_cols[i]])
  }
}

POEarea <- POEarea %>%
  layout(title = "",
         font = list(family = "Poppins"),
         plot_bgcolor = "rgba(0,0,0,0)",
         paper_bgcolor = "rgba(0,0,0,0)",
         xaxis = list(title = ""),
         yaxis = list(title = "",
                      tickformat = "0%",
                      range = c(0, 1))) %>%
  add_segments(
    x = min(df.phase.clinic$Date),
    xend = max(df.phase.clinic$Date),
    y = 0.9,
    yend = 0.9,
    line = list(dash = "dash", color = "#2f2f2f"),
    inherit = FALSE,
    showlegend = FALSE
  ) %>%
  add_annotations(
    x = max(df.phase.clinic$Date),
    y = 0.9,
    text = "<i>Goal</i>",
    showarrow = FALSE,
    font = list(size = 12),
    xanchor = 'left',
    yanchor = 'middle'
  ) %>% 
  config(displayModeBar = F)


```

<!--
Generate stacked bar chart that:
 - shows staffing levels for each role
 - shows vacancies
 PRODUCT: "staffchart"
-->

```{r staffchart, echo=FALSE, output=FALSE}
count_df$Role <- tools::toTitleCase(count_df$Role)

staffchart <- plot_ly(count_df, 
                      x = ~Active, 
                      y = ~Role, 
                      name = "Active", 
                      marker=list(color=cpaltemplates::palette_cpal_teal[6]), 
                      type = 'bar', 
                      hoverinfo = "none", 
                      orientation = 'h',
                      text = ~Active,
                      textposition = 'auto',
                      insidetextanchor="middle") %>%
  add_trace(x = ~Temps,
            y = ~Role,
            name = "Temporary/inactive", 
            marker=list(color=cpaltemplates::palette_cpal_teal[3]),
            text = ~Temps,
            textposition = 'auto',
            insidetextanchor="middle") %>%
  add_trace(x = ~Vacancies,
            y = ~Role,
            name = "Vacant", 
            marker=list(color=cpaltemplates::palette_cpal_red[3]),
            text = ~Vacancies,
            textposition = 'auto',
            insidetextanchor="middle") %>%
  layout(font = list(family = "Poppins"),
         plot_bgcolor = "rgba(0,0,0,0)",
         paper_bgcolor = "rgba(0,0,0,0)",
         yaxis = list(title = "",
                      categoryorder = "array",
                      categoryarray = c("Clerk", "Certifier", "Supervisor"),
                      automargin = TRUE,
                      tickfont = list(size = 12),
                      ticksuffix = "   "), # add 3 spaces after y-label
         xaxis = list(title = "",
                      gridwidth = 2,
                      dtick = 1), 
         barmode = 'stack') %>% 
  config(displayModeBar = F)

```

<!--
---CURRENTLY DEPRECATED---
Generate line chart that:
 - qualtrics
 PRODUCT: "qual_chart"
-->

```{r qualchart,  echo=FALSE, output=FALSE}


qualchart = NULL

# latest_df <- CSAT.charting %>% 
#   filter(pred == FALSE) %>%
#   arrange(desc(Date)) %>%
#   slice(1)
# 
# CSAT_value <- latest_df$CSAT
# 
# LA_CSAT_value <- latest_df$LA_CSAT
# 
# current_month_CSAT <- CSAT.charting %>% 
#   filter((year(Date) == year(Sys.Date())) & (month(Date) == month(Sys.Date()))) %>%
#   pull(CSAT)
# 
# compare_df <- data.frame(
#   Value = c(CSAT_value, LA_CSAT_value, current_month_CSAT),
#   Label = c(
#     paste("Customer satisfaction for", format(latest_df$Date, "%B %Y")),
#     "Dallas County average",
#     "Predicted score for this month"
#   ),
#   Color = c(palette_cpal_main[1], palette_cpal_main[2], "grey"),
#   X_position = c(1, 1.2, 1)
# )
# 
# compare_df$Color <- factor(compare_df$Color, labels = compare_df$Label)
# 
# qual_chart <- ggplot(compare_df, aes(x = X_position, y = Value, color = Color)) +
#   geom_segment(
#     aes(x = 1, y = ifelse(Value[1] > Value[3], Value[1] - 0.003, Value[1] + 0.003), xend = 1, yend = ifelse(Value[1] > Value[3], Value[3] + 0.003, Value[1] - 0.003)),
#     arrow = arrow(type = "closed", length = unit(0.1, "inches")),
#     color = "grey", linewidth = 0.9, linetype = "dashed"
#   ) +
#   geom_point(size = 6) +
#   scale_color_manual(values = c(palette_cpal_main[1], palette_cpal_main[2], "grey")) +
#   coord_cartesian(xlim = c(0.9, 2)) +
#   theme_light() +
#   theme(
#     plot.background = element_rect(fill = "transparent"),
#     axis.ticks.x = element_blank(),
#     axis.text.x = element_blank(),
#     axis.title.x = element_blank(),
#     axis.title.y = element_blank(),
#     panel.grid.major = element_blank(),
#     panel.grid.minor = element_blank(),
#     axis.line = element_blank(),
#     panel.border = element_blank(),
#     text = element_text(size = 14)
#   )

# qualchart <- plot_ly(CSAT.clinic.recent, x = ~Date, y = ~delta, type = 'bar', hoverinfo = "none", 
#                marker = list(color = ~color)) %>% 
#         layout(plot_bgcolor = "rgba(0,0,0,0)",
#                paper_bgcolor = "rgba(0,0,0,0)",
#                yaxis = list(zeroline = TRUE, 
#                             zerolinecolor = 'black', 
#                             showticklabels = FALSE,
#                             title = "",
#                             range = c(-0.5, 0.5)
#                             ), 
#                title = "",
#                xaxis = list(title = "Month")
#                ) %>%
#         add_annotations(x = -0.075, y = 0, 
#                         text = "average", 
#                         showarrow = FALSE, 
#                         font = list(size = 12),
#                         xref = 'paper',
#                         yref = 'y'
#                        ) %>%
#         add_annotations(x = -0.05, y = 0.25, 
#                         text = "better", 
#                         showarrow = FALSE, 
#                         font = list(size = 12),
#                         xref = 'paper',
#                         yref = 'y',
#                         textangle = -90
#                        ) %>%
#         add_annotations(x = -0.05, y = -0.25, 
#                         text = "worse", 
#                         showarrow = FALSE, 
#                         font = list(size = 12),
#                         xref = 'paper',
#                         yref = 'y',
#                         textangle = -90
#                        )

# ggplotly(
#   ggplot(CSAT.charting, aes(x = Date)) +
#   geom_line(aes(y = LA_avg), linetype = "dotted", color = "black", linewidth = 1.25) +
#   geom_line(aes(y = Average), color = "blue", linewidth = 1.25) +
#   geom_segment(aes(xend = Date,
#                  y = Average + delta,
#                  yend = Average,
#                  color = delta > 0),
#              size = 1.5,
#              linetype = "dotted",
#              show.legend = FALSE) +
#   geom_point(aes(x = Date,
#                  y = Average + delta,
#                  color = delta > 0),
#              size = 4,
#              show.legend = FALSE) +
#   scale_color_manual(values = c("red", "green")) +
#   ylim(6, 7) +
#   theme_minimal() +
#   labs(x = "Month", y = "CSAT Score", color = "CSAT above/below average")
# )

# ggplot(CSAT.clinic.recent, aes(x = Date)) +
#   geom_line(aes(y = LA_avg), linetype = "dotted", color = "black", size = 1.5) +
#   geom_line(aes(y = Average), color = "blue", size= 1.5) +
#   geom_line(aes(y = CSAT, group = 1, color = ifelse(CSAT > lag(CSAT), "green", "red")), size = 1.5) +
#   ylim(6, 7) +
#   scale_color_manual(values = c("red", "green")) +
#   theme_minimal() +
#   labs(x = "Month", y = "CSAT Score", color = "CSAT above/below average")

# ggplot(CSAT.charting, aes(x = Date)) +
#   geom_smooth(aes(y = LA_avg, group = 1, color = ifelse(LA_avg > lag(LA_avg), "#008097", "#E98816")), linetype = "dashed", linewidth = 1.1) +
#   geom_smooth(aes(y = Average), linewidth = 1.1, color = "#008097") +
#   geom_segment(aes(xend = Date, 
#                    y = Average + delta,
#                    yend = Average,
#                    color = delta),
#                size = 0.5,
#                linetype = "dotted",
#                show.legend = FALSE,) +
#   geom_point(aes(x = Date, 
#                  y = Average + delta,
#                  size = 5 * CSAT_n/max(CSAT_n)),
#              color = "#ffffff",
#              show.legend = FALSE) +
#   geom_point(aes(x = Date, 
#                  y = Average + delta,
#                  color = delta,
#                  size = 4 * CSAT_n/max(CSAT_n)),
#              show.legend = FALSE) +
#   ylim(6, 7) +
#   labs(x = "Month", y = "CSAT Score", color = "CSAT above/below average") +
#   scale_color_gradientn(colors = cpaltemplates::palette_cpal_diverging) +
#   theme(panel.background = element_rect(fill = "transparent", color = NA)) +
#   guides(color = "none")

```

<!--
################################################################################
DASHBOARD LAYOUT TEMPLATE STARTS HERE
-->

```{=html}
<div class="d-flex align-items-center">
    <div style="display: inline-block; border: 1px solid #2f2f2f; border-radius: 5px; padding: 10px; ">
        <div style="font-size: 2em; font-weight: bold; color: #2f2f2f; font-family: 'Poppins', sans-serif;">
            <i class="bi bi-building-fill mr-2"></i>
            `r params$clinic_name`
        </div>
        
        <div style="font-size: 1em; font-style: italic; color: #2f2f2f; font-family: 'Poppins', sans-serif; padding-top: 10px;">
            Number of `r format(ptcp %>% filter(Site == clinic_id, Date == max(Date)) %>% pull(Date), "%B %Y")` participants: <b>`r ptcp %>% filter(Site == clinic_id, Date == max(Date)) %>% pull(Participation) %>% format(big.mark = ",")`</b>
        </div>
    </div>
</div>
```

## Clinic environment

#### `r improvement_text`

#### `r phase_text`

`r POEarea`

#### `r performance_text`

`r POEradar`

::: {.callout-tip}

#### Phases and themes

Read more about the goals that go into [phases](phases.html) and [themes](themes.html).
:::

## Staffing

#### `r vacancy_text`

`r staffchart`

## Customer satisfaction

`r CSAT.text.clinic`

`r CSAT.text.agency`

`r CSAT.text.trend`
<<<<<<< HEAD
<<<<<<< Updated upstream

`r CSAT.sparkline`
=======
>>>>>>> Stashed changes
=======
>>>>>>> test
