---
title: "Clinic dashboard: `r params$clinic_name`"
title-block-banner: TRUE
fig-width: 7
fig-height: 5
fig-dpi: 300
warning: FALSE
error: TRUE
echo: FALSE
message: FALSE
params:
  clinic_name: "Abrams Road"
date: last-modified
published-title: "Last updated"
date-format: MMMM D, YYYY h:mm A z	
format: 
  html:
    toc: true
editor: source
---


<!--

## DASHBOARD TEMPLATE ##

This template for clinic dashboards is in the following order:
 1. Dynamic text generations
 2. Visualization generations
 3. Layout of dashboard using variables from generations
 
-->

```{r setup, echo=FALSE, output=FALSE}
clinic_name = params$clinic_name

files <- list.files(path = "C:/Users/twcro/Documents/GitHub/_WICdashboardClinic/data/scriptData/", pattern = "\\.RData$")

# load each file
for (file in files) {
  load(paste0("C:/Users/twcro/Documents/GitHub/_WICdashboardClinic/data/scriptData/", file))
}

library(tidyverse)
library(googlesheets4)
library(tsutils)
library(plotly)
library(readxl)
library(glue)
library(stringr)
library(waffle)
library(forecast)
library(tsibble)
library(cpaltemplates)

## make sure poppins is installed locally
poppins_import()

set_cpal_defaults()


# palette for visualizations
palette_a <- c(
  phase1 = 'rgba(80, 203, 134, 0.5)',
  phase2 = 'rgba(0, 201, 194, 0.5)',
  phase3 = 'rgba(0, 191, 234, 0.5)',
  phase4 = 'rgba(107, 175, 241, 0.5)',
  phase5 = 'rgba(175, 157, 218, 0.5)'
)
palette <- c(
  phase1 = 'rgba(80, 203, 134, 1)',
  phase2 = 'rgba(0, 201, 194, 1)',
  phase3 = 'rgba(0, 191, 234, 1)',
  phase4 = 'rgba(107, 175, 241, 1)',
  phase5 = 'rgba(175, 157, 218, 1)'
)

bold_color <- function(text, color) {
  paste0("<b style='color:", color, "'>", text, "</b>")
}

# high performance threshold for POEs (90%)
threshold = 0.9

# fail threshold (50%)
fail = 0.5

# maximum acceptable num. families in waiting room at once
maxFamiliesWaiting = 8

# dynamic text prep
oxford_comma <- function(x) {
  if (length(x) > 2) {
    paste(paste(x[-length(x)], collapse=", "), "and", x[length(x)])
  } else {
    paste(x, collapse=" and ")
  }
}
```

<!--
Set aside numbers of families waiting, specify phases
-->

```{r preprocess, echo=FALSE, output=FALSE}
df.familiesWaiting <- df %>% 
  dplyr::select(Clinic, Date, `# of Families Waiting`) %>%
  rename(familiesWaiting = `# of Families Waiting`) %>%
  drop_na()

df <- df %>%
  mutate(`# of Families Waiting` = 1 / exp(`# of Families Waiting` / maxFamiliesWaiting))

df.phase <- df %>%
  group_by(Clinic) %>%
  replace(is.na(.), 0) %>% 
  pivot_longer( cols = -c(1:2), names_to = "variable", values_to = "score") %>%
  left_join(POE, by = "variable") %>%
  group_by(Clinic, Date, phase) %>%
  summarise(score = mean(score, na.rm = TRUE)) %>%
  pivot_wider(names_from = phase, values_from = score) %>%
  rename_with(~ifelse(grepl("^\\d+$", .), paste0("phase", .), .), -c(Clinic, Date))
```


<!--
Summarize POE data from individual criteria into categories and even wider themes
-->

```{r categories, echo=FALSE, output=FALSE}

df.grouped.long <- df %>%
  pivot_longer(
    cols = -c(Clinic, Date), 
    names_to = "variable", 
    values_to = "value"
  ) %>%
  merge(POE, by = "variable") %>%
  group_by(Clinic, Date, category) %>%
  summarise(Value = mean(value, na.rm = TRUE), .groups = "drop")
  
df.grouped <- df.grouped.long %>% 
  pivot_wider(
    names_from = category, 
    values_from = Value
  )

##  THEMES DF
df.themes.long <- df %>%
  pivot_longer(
    cols = -c(Clinic, Date), 
    names_to = "variable", 
    values_to = "value"
  ) %>%
  merge(POE, by = "variable") %>%
  group_by(Clinic, Date, theme) %>%
  summarise(Value = mean(value, na.rm = TRUE), .groups = "drop")
  
df.themes <- df.themes.long %>% 
  pivot_wider(
    names_from = theme, 
    values_from = Value
  )

```


<!--
Snapshot of only the most recent data to see current fulfillment
-->

```{r snapshot, echo=FALSE, output=FALSE}
##  DETAILED RECENT SNAPSHOT
df.recent <- df %>%
  group_by(Clinic) %>%
  slice(which.max(Date)) %>%
  select(-c("Date")) %>%
  list(clinic_map) %>% 
  reduce(left_join, by = "Clinic") %>%
  relocate(any_of(c("ID", "Manager")), .after = Clinic)


##  GROUPED RECENT SNAPSHOT
df.recent.grouped <- df.grouped %>%
  group_by(Clinic) %>%
  slice(which.max(Date)) %>%
  select(-c("Date")) %>%
  list(clinic_map) %>% 
  reduce(left_join, by = "Clinic") %>%
  relocate(any_of(c("ID", "Manager")), .after = Clinic)

##  THEMED RECENT SNAPSHOT
df.recent.themes <- df.themes %>%
  group_by(Clinic) %>%
  slice(which.max(Date)) %>%
  select(-c("Date")) %>%
  list(clinic_map) %>% 
  reduce(left_join, by = "Clinic") %>%
  relocate(any_of(c("ID", "Manager")), .after = Clinic)

### long form of themes for radar charts later
df.recent.themes.long <- df.recent.themes %>%
  pivot_longer(cols = starts_with(c("Hospitality", "Communication", "Layout", "Efficiency", "Safety")),
               names_to = "Theme",
               values_to = "Value")

```


<!--
AGENCY-WIDE PREPROCESSING STOPS HERE -- BELOW ARE GENERATIONS
-->


<!--
Generate dynamic text that: 
 - separates into themes
 - determines strengths based on 'threshold'
 - determines fails based on 'fail'
 PRODUCT: "phase_text"
-->

```{r phasetext, echo=FALSE, output=FALSE}
df.phase.clinic <- df.phase %>%
  # ungroup() %>%
  # mutate_if(is.numeric, ~./(ncol(.) - 2)) %>%
  filter(Clinic == clinic_name)

phase_eval <- df.phase.clinic %>%
  filter(Date == max(df.phase.clinic$Date)) %>%
  ungroup() %>% select(-c(Clinic, Date)) %>% 
  gather(key = "phase", value = "metric") %>%
  mutate(phase = gsub("(phase)(\\d+)", "Phase \\2", phase),
         evaluation = if_else(metric > threshold,
                              "fulfilled",
                              "not_fulfilled"))

# create grouped phase strings
phase_eval.strong <- paste(phase_eval %>% filter(evaluation == "fulfilled") %>% pull(phase), collapse = ", ")
phase_eval.weak <- paste(phase_eval %>% filter(evaluation == "not_fulfilled") %>% pull(phase), collapse = ", ")

# Use your oxford_comma function to make it look better
phase_eval.strong <- oxford_comma(strsplit(phase_eval.strong, ", ")[[1]])
phase_eval.weak <- oxford_comma(strsplit(phase_eval.weak, ", ")[[1]])

phase_text <- paste(if (nchar(phase_eval.strong) > 0) 
                             paste0("Nice job getting ", phase_eval.strong, " fulfillment above ", sprintf("%.f%%", threshold*100), "!"),
                           if (nchar(phase_eval.weak) > 0) 
                             paste0("Work on getting ", phase_eval.weak, " targets up."))
```


<!--
Generate dynamic text that:
 - counts how many POE fails there are by phase
 - if there are 5 or fewer, lists them all
 - if there are more than 5, picks 5 at random to serve as monthly targets
 PRODUCT: "improvement_text"
-->

```{r improvement_targets, echo=FALSE, output=FALSE}
df.recent.long <- df.recent %>%
  pivot_longer(cols = -c(1:2,length(.)),
               names_to = "variable",
               values_to = "Value") %>%
  merge(POE, by = "variable") %>%
  select(Clinic, Value, improvement_phrase, phase)

df.clinic_fails <- df.recent.long %>%
  filter(Clinic == clinic_name, Value < fail)

fail_count <- df.clinic_fails %>%
  count(phase) %>%
  mutate(name = paste0("Phase ", phase),
         color = palette[paste0("phase", phase)],
         message = paste(n, "items in", map2(name, color, bold_color))) %>%
  pull(message)

fail_count_string <- paste(fail_count, collapse = ", ")

if(length(fail_count) > 1) {
  fail_count_string <- stringr::str_replace(fail_count_string, "\\,(?=[^,]*$)", " and")
}

improves <- df.clinic_fails %>% 
  { if(nrow(.) > 5) 
      slice_sample(., n = 5)
    else 
      .
  } %>% pull(improvement_phrase)

improvement_text <- glue(
  "{clinic_name} has {knitr::asis_output(fail_count_string)} that need improvement. 
  
  Here are some goals to focus on:
  
   - {improves[1]}
   - {improves[2]}
   - {improves[3]}
   - {improves[4]}
   - {improves[5]}
  "
)

```


<!--
Generate dynamic text that:
 - summarizes recent performance by theme
 - separates strengths and fails
 PRODUCT: "performance_text"
-->

```{r themes, echo=FALSE, output=FALSE}
df.recent.themes.long.filtered <- df.recent.themes.long %>% filter(Clinic == clinic_name)

performance_text <- paste(
  if_else(length(strong_themes <- df.recent.themes.long.filtered %>% filter(Value > threshold) %>% pull(Theme) %>% tolower()) > 0,
    paste0(clinic_name, " is strong in ", oxford_comma(strong_themes), "."),
    ""),
  if_else(length(weak_themes <- df.recent.themes.long.filtered %>% filter(Value < fail) %>% pull(Theme) %>% tolower()) > 0,
    paste0("Focus on improving clinic ", oxford_comma(weak_themes), "."),
    "There aren't any particularly weak areasâ€”keep up the good work!")
)

```

<!--
Generate dynamic text that:
 - calculates vacancies by role
 - suggests staff hirings
 PRODUCT: "vacancy_text"
-->

```{r vacancies, echo=FALSE, output=FALSE}
summarize_role <- function(df, clinic_name, role) {
  df %>%
    filter(Location == clinic_name, Role == role) %>%
    summarize(
      Vacancies = sum(Vacant == "TRUE", na.rm = TRUE),
      Temps = sum(`In training` == "TRUE" | `Temp` == "TRUE" | `Part-time` == "TRUE" | `On leave` == "TRUE", na.rm = TRUE),
      `WCS trainees` = sum(`WCS trainee` == "TRUE", na.rm = TRUE),
      Active = n() - Vacancies - Temps - `WCS trainees`,
      Role = role
    )
}

roles <- c("clerk", "certifier", "supervisor")
count_df <- purrr::map_dfr(roles, summarize_role, df = staff, clinic_name = clinic_name)

create_vacancy_sentence <- function(df) {
  if (!any(df$Vacancies > 0)) {
    return("There are no vacancies right now. Nice job!")
  }
  
  vacancy_df <- df %>%
    filter(Vacancies > 0) %>%
    mutate(
      RolePlural = ifelse(Vacancies > 1, paste0(Role, "s"), Role),
      RoleSentence = paste(Vacancies, RolePlural, "and")
    ) %>%
    summarise(vacancy_sentence = stringr::str_c(RoleSentence, collapse = " ")) %>%
    mutate(vacancy_sentence = stringr::str_remove(vacancy_sentence, " and$"))
    
  vacancy_sentence <- stringr::str_glue("Consider hiring {vacancy_df$vacancy_sentence} to meet staffing needs.")
  
  return(vacancy_sentence)
}

vacancy_text <- create_vacancy_sentence(count_df)
```

<!--
Generate dynamic text that:
 - qualtrics
 PRODUCT: "qualtext"
-->

```{r qualtext, echo=FALSE, output=FALSE}
# CSAT.filtered <- CSAT %>%
#   filter(Clinic == clinic_name, !is.na(CSAT), !is.na(`CSAT (n)`)) %>%
#   mutate(YearMonth = format(Date, "%Y-%m")) %>%
#   distinct(YearMonth, .keep_all = TRUE) %>%
#   arrange(desc(YearMonth)) %>%
#   slice_head(n = 2)

qualtext <- ""

```

<!--
Generate radar chart that:
 - compares POE themes by fulfillment
 PRODUCT: "POEradar"
-->

```{r POEradar, echo=FALSE, output=FALSE}
POEradar <- plot_ly(df.recent.themes.long.filtered, 
                    r = ~Value, 
                    theta = ~Theme, 
                    type = 'scatterpolar', 
                    mode = "markers", 
                    fill = 'toself', 
                    hoverinfo = "none") %>%
  layout(
    title = "",
    plot_bgcolor = "rgba(0,0,0,0)",
    paper_bgcolor = "rgba(0,0,0,0)",
    polar = list(
      radialaxis = list(
        visible = F,
        range = c(0,1)
      )
    ),
    showlegend = F
  )
```

<!--
Generate area-under-the-line chart that:
 - shows POE fulfillment by phase over time
 PRODUCT: "POEarea"
-->

```{r POEarea, echo=FALSE, output=FALSE}
POEarea <- plot_ly(df.phase.clinic, 
                hoverinfo = "none",
                x = ~Date, 
                y = ~phase1, 
                name = "Phase 1", 
                type = 'scatter', 
                mode = 'none',
                fill = 'tozeroy',
                fillcolor = palette_a['phase1']) %>%
  add_trace(y = ~phase2, 
            name = "Phase 2", 
            fill = 'tozeroy',
            fillcolor = palette_a['phase2']) %>%
  layout(title = "",
         plot_bgcolor = "rgba(0,0,0,0)",
         paper_bgcolor = "rgba(0,0,0,0)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Fulfillment",
                      tickformat = "0%",
                      range = c(0, 1))) %>%
  add_segments(
    x = min(df.phase.clinic$Date),
    xend = max(df.phase.clinic$Date),
    y = 0.9,
    yend = 0.9,
    line = list(dash = "dash"),
    inherit = FALSE,
    showlegend = FALSE
  )
```

<!--
Generate stacked bar chart that:
 - shows staffing levels for each role
 - shows vacancies
 PRODUCT: "staffchart"
-->

```{r staffchart, echo=FALSE, output=FALSE}
staffchart <- plot_ly(count_df, x = ~Role, y = ~Active, name = "Active", marker=list(color="rgba(1,163,104,0.9)"), type = 'bar', hoverinfo = "none") %>%
  # add_trace(y = ~`WCS trainees`, name = "WCS trainee", marker=list(color="#FF69B4")) %>%
  add_trace(y = ~Temps, name = "Temporary/inactive", marker=list(color="rgba(92,147,116,0.6)")) %>%
  add_trace(y = ~Vacancies, name = "Vacant", marker=list(color="rgba((128,128,128,0.3))")) %>%
  layout(plot_bgcolor = "rgba(0,0,0,0)",
         paper_bgcolor = "rgba(0,0,0,0)",
         xaxis = list(title = "",
                      categoryorder = "array",
                      categoryarray = c("clerk", "certifier", "supervisor")),
         yaxis = list(title = 'Count',
                      gridwidth = 2), 
         barmode = 'stack')

```

<!--
Generate line chart that:
 - qualtrics
 PRODUCT: "qual_chart"
-->

```{r qualchart,  echo=FALSE, output=FALSE, include=FALSE}
CSAT.integrated <- CSAT %>%
  drop_na() %>%
  bind_rows(CSAT.predict) %>%
  arrange(Clinic, Date) %>%
  mutate(Date = floor_date(Date, "month"),
         `CSAT Points` = ifelse(is.na(`CSAT Points`), CSAT * `CSAT (n)`, `CSAT Points`)
         ) %>%
  group_by(Clinic) %>%
  do({
    firstP = first(.$`Running CSAT Points`)
    firstn = first(.$`Running CSAT n`)
    mutate(., `Running CSAT Points` = firstP + cumsum(`CSAT Points`),
           `Running CSAT n` = firstn + cumsum(`CSAT (n)`),) 
  }) %>%
  mutate(`Running CSAT Average` = `Running CSAT Points` / `Running CSAT n`)

CSAT.groups <- CSAT.integrated %>%
  filter(`CSAT (n)` != 0, !is.na(`CSAT (n)`)) %>%
  group_by(Date) %>%
  summarize_at(vars(LA_CSAT = CSAT, LA_avg = `Running CSAT Average`), list(~ mean(., na.rm=TRUE)))

CSAT.clinic <- CSAT %>%
  filter(Clinic == clinic_name) %>%
  mutate(Date = floor_date(Date, "month"), 
         Average = lag(`Running CSAT Average`, n = 1)) %>%
  select(Date, CSAT, CSAT_n = `CSAT (n)`, Average) %>%
  filter(!is.na(`Average`), !is.na(`CSAT`)) %>%
  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%
  left_join(CSAT.groups, by="Date")


CSAT.clinic.recent <- CSAT.clinic %>%
  arrange(desc(Date)) %>%
  slice(1:6) %>%
  mutate(pred = FALSE)

CSAT.clinic.predict <- CSAT.predict %>%
  filter(Clinic == clinic_name) %>%
  mutate(Date = floor_date(Date, "month")) %>%
  left_join(CSAT.integrated %>% select(Date, Clinic, Average = `Running CSAT Average`), by=c("Date", "Clinic")) %>%
  select(-c(Clinic), CSAT_n = `CSAT (n)`) %>%
  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%
  left_join(CSAT.groups, by="Date") %>%
  slice(1:2) %>%
  mutate(pred = TRUE)
  
CSAT.charting <- CSAT.clinic.recent %>%
  mutate(Date = as.Date(Date)) %>%
  arrange(Date) %>%
  bind_rows(CSAT.clinic.predict)



# qualchart <- plot_ly(CSAT.clinic.recent, x = ~Date, y = ~delta, type = 'bar', hoverinfo = "none", 
#                marker = list(color = ~color)) %>% 
#         layout(plot_bgcolor = "rgba(0,0,0,0)",
#                paper_bgcolor = "rgba(0,0,0,0)",
#                yaxis = list(zeroline = TRUE, 
#                             zerolinecolor = 'black', 
#                             showticklabels = FALSE,
#                             title = "",
#                             range = c(-0.5, 0.5)
#                             ), 
#                title = "",
#                xaxis = list(title = "Month")
#                ) %>%
#         add_annotations(x = -0.075, y = 0, 
#                         text = "average", 
#                         showarrow = FALSE, 
#                         font = list(size = 12),
#                         xref = 'paper',
#                         yref = 'y'
#                        ) %>%
#         add_annotations(x = -0.05, y = 0.25, 
#                         text = "better", 
#                         showarrow = FALSE, 
#                         font = list(size = 12),
#                         xref = 'paper',
#                         yref = 'y',
#                         textangle = -90
#                        ) %>%
#         add_annotations(x = -0.05, y = -0.25, 
#                         text = "worse", 
#                         showarrow = FALSE, 
#                         font = list(size = 12),
#                         xref = 'paper',
#                         yref = 'y',
#                         textangle = -90
#                        )

# qual_chart <- ggplotly(
#   ggplot(CSAT.charting, aes(x = Date)) +
#   geom_line(aes(y = LA_avg), linetype = "dotted", color = "black", linewidth = 1.25) +
#   geom_line(aes(y = Average), color = "blue", linewidth = 1.25) +
#   geom_segment(aes(xend = Date, 
#                  y = Average + delta,
#                  yend = Average,
#                  color = delta > 0),
#              size = 1.5,
#              linetype = "dotted",
#              show.legend = FALSE) +
#   geom_point(aes(x = Date, 
#                  y = Average + delta,
#                  color = delta > 0),
#              size = 4,
#              show.legend = FALSE) +
#   scale_color_manual(values = c("red", "green")) +
#   ylim(6, 7) +
#   theme_minimal() +
#   labs(x = "Month", y = "CSAT Score", color = "CSAT above/below average")
# )

# qualchart2 <- ggplot(CSAT.clinic.recent, aes(x = Date)) +
#   geom_line(aes(y = LA_avg), linetype = "dotted", color = "black", size = 1.5) +
#   geom_line(aes(y = Average), color = "blue", size= 1.5) +
#   geom_line(aes(y = CSAT, group = 1, color = ifelse(CSAT > lag(CSAT), "green", "red")), size = 1.5) +
#   ylim(6, 7) +
#   scale_color_manual(values = c("red", "green")) +
#   theme_minimal() +
#   labs(x = "Month", y = "CSAT Score", color = "CSAT above/below average")

```


<!--
DASHBOARD LAYOUT TEMPLATE STARTS HERE
-->

## Points of excellence

#### `r improvement_text`

#### `r performance_text`

`r POEradar`

#### `r phase_text`

`r POEarea`

## Staffing

#### `r vacancy_text`

`r staffchart`

## Customer satisfaction

```{r qualchartprint, include=TRUE}
ggplot(CSAT.charting, aes(x = Date)) +
  geom_smooth(aes(y = LA_avg), linetype = "dashed", color = "#2f2f2f", linewidth = 1.1) +
  geom_smooth(aes(y = Average), linewidth = 1.1, color = "#008097") +
  geom_segment(aes(xend = Date, 
                   y = Average + delta,
                   yend = Average,
                   color = delta),
               size = 0.5,
               linetype = "dotted",
               show.legend = FALSE,) +
  geom_point(aes(x = Date, 
                 y = Average + delta),
             size = 5,
             color = "#ffffff",
             show.legend = FALSE) +
  geom_point(aes(x = Date, 
                 y = Average + delta,
                 color = delta),
             size = 4,
             show.legend = FALSE) +
  ylim(6, 7) +
  labs(x = "Month", y = "CSAT Score", color = "CSAT above/below average") +
  scale_color_gradientn(colors = cpaltemplates::palette_cpal_diverging)

```
