{"title":"WIC Clinic Dashboard","markdown":{"yaml":{"title":"WIC Clinic Dashboard","title-block-banner":true,"fig-width":9,"fig-height":5,"fig-dpi":300,"warning":false,"error":true,"echo":false,"message":false,"params":{"manager_name":"Ana"},"format":"html","editor":"source"},"headingText":"DASHBOARD TEMPLATE ##","containsRefs":false,"markdown":"\n\n\n<!--\n\n\nThis template for clinic dashboards is in the following order:\n 1. Dynamic text generations\n 2. Visualization generations\n 3. Layout of dashboard using variables from generations\n \n-->\n\n```{r setup, echo=FALSE, output=FALSE}\nlibrary(tidyverse)\nlibrary(googlesheets4)\nlibrary(tsutils)\nlibrary(plotly)\nlibrary(readxl)\nlibrary(glue)\nlibrary(stringr)\nlibrary(waffle)\nlibrary(forecast)\nlibrary(tsibble)\nlibrary(cpaltemplates)\n\nmanager_name = params$manager_name\n\ndata_dir <- \"C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/\"\n\nfiles <- list.files(path = data_dir, pattern = \"\\\\.csv$\")\n\nfor (file in files) {\n  file_name <- tools::file_path_sans_ext(file)\n  if (file_name == \"ptcp\") {\n    assign(gsub(\"__\", \"\\\\.\", file_name), read_csv(file = paste0(data_dir, file)) %>%\n             rename(Date = colnames(.)[1]) %>%\n             mutate(Date = as.Date(Date)))\n  } else {\n    assign(gsub(\"__\", \"\\\\.\", file_name), read_csv(file = paste0(data_dir, file)))\n  }\n}\n\nclinic_names = clinic_map$Clinic[clinic_map$Manager == manager_name]\nclinic_ids = clinic_map$Site[clinic_map$Manager == manager_name]\n\n## make sure poppins is installed locally\npoppins_import()\n\nset_cpal_defaults()\n\nbold_color <- function(text, color) {\n  paste0(\"<b style='color:\", color, \"'>\", text, \"</b>\")\n}\n\n# high performance threshold for POEs (90%)\nthreshold = 0.9\n\n# fail threshold (50%)\nfail = 0.5\n\n# maximum acceptable num. families in waiting room at once\nmaxFamiliesWaiting = 8\n\n# dynamic text prep\noxford_comma <- function(x) {\n  if (length(x) > 2) {\n    paste(paste(x[-length(x)], collapse=\", \"), \"and\", x[length(x)])\n  } else {\n    paste(x, collapse=\" and \")\n  }\n}\n\ncurrent_date <- Sys.Date()\ncurrent_year <- as.integer(format(Sys.Date(), \"%Y\"))\ncurrent_month <- as.integer(format(Sys.Date(), \"%m\"))\n\n```\n\n\n<!--\nSet aside numbers of families waiting, specify phases\n-->\n\n```{r preprocess, echo=FALSE, output=FALSE}\ndf.familiesWaiting <- df %>% \n  select(Site, Date, `# of Families Waiting`) %>%\n  rename(familiesWaiting = `# of Families Waiting`) %>%\n  drop_na()\n\ndf <- df %>%\n  mutate(`# of Families Waiting` = 1 / exp(`# of Families Waiting` / maxFamiliesWaiting))\n\ndf.phase <- df %>%\n  select(-Clinic, -Manager) %>%\n  group_by(Site) %>%\n  replace(is.na(.), 0) %>% \n  pivot_longer( cols = -c(1:2), names_to = \"variable\", values_to = \"score\") %>%\n  left_join(POE, by = \"variable\") %>%\n  group_by(Site, Date, phase) %>%\n  summarise(score = mean(score, na.rm = TRUE)) %>%\n  pivot_wider(names_from = phase, values_from = score) %>%\n  rename_with(~ifelse(grepl(\"^\\\\d+$\", .), paste0(\"phase\", .), .), -c(Site, Date))\n```\n\n\n<!--\nSummarize POE data from individual criteria into categories and even wider themes\n-->\n\n\n```{r categories, echo=FALSE, output=FALSE}\n\ndf.grouped.long <- df %>%\n  select(-Clinic, -Manager) %>%\n  pivot_longer(\n    cols = -c(Site, Date), \n    names_to = \"variable\", \n    values_to = \"value\"\n  ) %>%\n  merge(POE, by = \"variable\") %>%\n  group_by(Site, Date, category) %>%\n  summarise(Value = mean(value, na.rm = TRUE), .groups = \"drop\")\n  \ndf.grouped <- df.grouped.long %>% \n  pivot_wider(\n    names_from = category, \n    values_from = Value\n  )\n\n##  THEMES DF\ndf.themes.long <- df %>%\n  select(-Clinic, -Manager) %>%\n  pivot_longer(\n    cols = -c(Site, Date), \n    names_to = \"variable\", \n    values_to = \"value\"\n  ) %>%\n  merge(POE, by = \"variable\") %>%\n  group_by(Site, Date, theme) %>%\n  summarise(Value = mean(value, na.rm = TRUE), .groups = \"drop\")\n  \ndf.themes <- df.themes.long %>% \n  pivot_wider(\n    names_from = theme, \n    values_from = Value\n  )\n\n```\n\n<!--\nSnapshot of only the most recent data to see current fulfillment\n-->\n\n```{r snapshot, echo=FALSE, output=FALSE}\n##  DETAILED RECENT SNAPSHOT\ndf.recent <- df %>%\n  group_by(Site) %>%\n  slice(which.max(Date)) %>%\n  select(-c(\"Date\"))\n\n##  GROUPED RECENT SNAPSHOT\ndf.recent.grouped <- df.grouped %>%\n  group_by(Site) %>%\n  slice(which.max(Date)) %>%\n  select(-c(\"Date\"))\n\n##  THEMED RECENT SNAPSHOT\ndf.recent.themes <- df.themes %>%\n  group_by(Site) %>%\n  slice(which.max(Date)) %>%\n  select(-c(\"Date\"))\n\n### long form of themes for radar charts later\ndf.recent.themes.long <- df.recent.themes %>%\n  pivot_longer(cols = starts_with(c(\"Hospitality\", \"Communication\", \"Layout\", \"Efficiency\", \"Safety\")),\n               names_to = \"Theme\",\n               values_to = \"Value\")\n\n```\n\n\n<!--\nAGENCY-WIDE PREPROCESSING STOPS HERE -- BELOW ARE GENERATIONS\n-->\n\n\n<!--\nGenerate dynamic text that: \n - separates into themes\n - determines strengths based on 'threshold'\n - determines fails based on 'fail'\n PRODUCT: \"phase_text\"\n-->\n\n```{r phasetext, echo=FALSE, output=FALSE}\ndf.phase.clinic <- df.phase %>%\n  # ungroup() %>%\n  # mutate_if(is.numeric, ~./(ncol(.) - 2)) %>%\n  filter(Site %in% clinic_ids) %>%\n  select(-Site) %>%\n  group_by(Date) %>%\n  summarize(phase1 = mean(phase1, na.rm = TRUE),\n            phase2 = mean(phase2, na.rm = TRUE))\n\nphase_eval <- df.phase.clinic %>%\n  filter(Date == max(df.phase.clinic$Date)) %>%\n  ungroup() %>% select(-c(Date)) %>% \n  gather(key = \"phase\", value = \"metric\") %>%\n  mutate(phase = gsub(\"(phase)(\\\\d+)\", \"Phase \\\\2\", phase),\n         evaluation = if_else(metric > threshold,\n                              \"fulfilled\",\n                              \"not_fulfilled\"))\n\n# create grouped phase strings\nphase_eval.strong <- phase_eval %>% filter(evaluation == \"fulfilled\") %>% mutate(colored_phase = paste0(\"<span style='color:\", palette_cpal_main[stringr::str_remove(phase, \"Phase \")],\"'>\", phase, \"</span>\")) %>% pull(colored_phase) %>% paste(collapse = \", \")\nphase_eval.weak <- phase_eval %>% filter(evaluation == \"not_fulfilled\") %>% mutate(colored_phase = paste0(\"<span style='color:\", palette_cpal_main[stringr::str_remove(phase, \"Phase \")],\"'>\", phase, \"</span>\")) %>% pull(colored_phase) %>% paste(collapse = \", \")\n\n# Use your oxford_comma function to make it look better\nphase_eval.strong <- oxford_comma(strsplit(phase_eval.strong, \", \")[[1]])\nphase_eval.weak <- oxford_comma(strsplit(phase_eval.weak, \", \")[[1]])\n\nphase_text <- paste(if (nchar(phase_eval.strong) > 0) \n                             paste0(\"Nice job getting \", phase_eval.strong, \" fulfillment above \", \"<span style='color:#2f2f2f'>\", sprintf(\"%.f%%\", threshold*100), \"</span>\", \"!\"),\n                           if (nchar(phase_eval.weak) > 0) \n                             paste0(\"Work on getting \", phase_eval.weak, \" targets up.\"))\n```\n\n\n<!--\nGenerate dynamic text that:\n - counts how many POE fails there are by phase\n - if there are 5 or fewer, lists them all\n - if there are more than 5, picks 5 at random to serve as monthly targets\n PRODUCT: \"improvement_text\"\n-->\n\n```{r improvement_targets, echo=FALSE, output=FALSE}\ndf.recent.long <- df.recent %>%\n  select(-Clinic, -Manager) %>%\n  pivot_longer(cols = -c(1),\n               names_to = \"variable\",\n               values_to = \"Value\") %>%\n  merge(POE, by = \"variable\") %>%\n  select(Site, Value, improvement_phrase, phase)\n\ndf.clinic_fails <- df.recent.long %>%\n  filter(Site %in% clinic_ids) %>%\n  select(-Site) %>%\n  group_by(phase, improvement_phrase) %>%\n  summarize(Value = mean(Value, na.rm = TRUE)) %>%\n  filter(Value < fail)\n\nfail_count <- df.clinic_fails %>%\n  count(phase) %>%\n  mutate(name = paste0(\"Phase \", phase),\n         color = palette_cpal_main[phase],\n         message = glue_col(\"{n} items in <span style='color:{color}'>{name}</span>\")) %>%\n  pull(message)\n\nfail_count_string <- paste(fail_count, collapse = \", \")\n\nif(length(fail_count) > 1) {\n  fail_count_string <- stringr::str_replace(fail_count_string, \"\\\\,(?=[^,]*$)\", \" and\")\n}\n\nimproves <- df.clinic_fails %>% \n  { if(nrow(.) > 5) \n      slice_sample(., n = 5)\n    else \n      .\n  } %>% pull(improvement_phrase)\n\nimprovements_string <- paste0(\"\\n\\n - \", paste(improves, collapse = \"\\n\\n - \"))\n\nimprovement_text <- knitr::asis_output(glue(\n  \"{manager_name}'s clinics overall have {knitr::asis_output(fail_count_string)} that need improvement. \n  {if (length(improves) > 0) {\n    paste('Here are some goals to have your supervisors focus on:', improvements_string)\n  } else {\n    'Wonderful work! You and your employees are a WIC superstars!'\n  }}\"\n))\n\n```\n\n<!--\nGenerate dynamic text that:\n - summarizes recent performance by theme\n - separates strengths and fails\n PRODUCT: \"performance_text\"\n-->\n\n```{r themes, echo=FALSE, output=FALSE}\ndf.recent.themes.long.filtered <- df.recent.themes.long %>% \n  filter(Site %in% clinic_ids) %>%\n  select(-Site) %>%\n  group_by(Theme) %>%\n  summarize(Value = mean(Value, na.rm = TRUE))\n\nstrong_themes <- df.recent.themes.long.filtered %>% \n  filter(Value > threshold) %>% \n  pull(Theme) %>% \n  tolower()\n\nweak_themes <- df.recent.themes.long.filtered %>% \n  filter(Value < fail) %>% \n  pull(Theme) %>% \n  tolower()\n\nstrong_text <- if (length(strong_themes) > 0) {\n  paste0(manager_name, \"'s clinics are strong in \", oxford_comma(strong_themes), \".\")\n} else {\n  \"\"\n}\n\nweak_text <- if (length(weak_themes) > 0) {\n  paste0(\"Focus on improving clinic \", oxford_comma(weak_themes), \".\")\n} else {\n  \"There aren't any particularly weak areasâ€”keep up the good work!\"\n}\n\nperformance_text <- paste(strong_text, weak_text)\n\n```\n\n<!--\nGenerate dynamic text that:\n - calculates vacancies by role\n - suggests staff hirings\n PRODUCT: \"vacancy_text\"\n-->\n\n```{r vacancies, echo=FALSE, output=FALSE}\nsummarize_role <- function(df, clinic_ids, role) {\n  df %>%\n    filter(Site %in% clinic_ids, Role == role) %>%\n    summarize(\n      Vacancies = sum(Vacant == \"TRUE\", na.rm = TRUE),\n      Temps = sum(`In training` == \"TRUE\" | `Temp` == \"TRUE\" | `Part-time` == \"TRUE\" | `On leave` == \"TRUE\", na.rm = TRUE),\n      `WCS trainees` = sum(`WCS trainee` == \"TRUE\", na.rm = TRUE),\n      Active = n() - Vacancies - Temps,\n      Role = role\n    )\n}\n\nroles <- c(\"clerk\", \"certifier\", \"supervisor\")\ncount_df <- purrr::map_dfr(roles, summarize_role, df = staff, clinic_ids = clinic_ids)\n\ncreate_vacancy_sentence <- function(df) {\n  if (!any(df$Vacancies > 0)) {\n    return(\"There are no vacancies right now. Nice job!\")\n  }\n  \n  vacancy_df <- df %>%\n    filter(Vacancies > 0) %>%\n    mutate(\n      RolePlural = ifelse(Vacancies > 1, paste0(Role, \"s\"), Role),\n      RoleSentence = paste(Vacancies, RolePlural, \"and\")\n    ) %>%\n    summarise(vacancy_sentence = stringr::str_c(RoleSentence, collapse = \" \")) %>%\n    mutate(vacancy_sentence = stringr::str_remove(vacancy_sentence, \" and$\"))\n    \n  vacancy_sentence <- stringr::str_glue(\"Consider hiring {vacancy_df$vacancy_sentence} to meet staffing needs.\")\n  \n  return(vacancy_sentence)\n}\n\nvacancy_text <- create_vacancy_sentence(count_df)\n```\n\n<!--\nGenerate dynamic text that:\n - qualtrics\n PRODUCT: \"CSATtext\"\n-->\n\n```{r CSATtext, echo=FALSE, output=FALSE}\nCSAT.integrated <- CSAT %>%\n  drop_na() %>%\n  bind_rows(CSAT.predict) %>%\n  arrange(Site, Date) %>%\n  mutate(Date = floor_date(Date, \"month\"),\n         `CSAT Points` = ifelse(is.na(`CSAT Points`), CSAT * `CSAT (n)`, `CSAT Points`)\n         ) %>%\n  group_by(Site) %>%\n  do({\n    firstP = first(.$`Running CSAT Points`)\n    firstn = first(.$`Running CSAT n`)\n    mutate(., `Running CSAT Points` = firstP + cumsum(`CSAT Points`),\n           `Running CSAT n` = firstn + cumsum(`CSAT (n)`),) \n  }) %>%\n  mutate(`Running CSAT Average` = `Running CSAT Points` / `Running CSAT n`)\n\nCSAT.groups <- CSAT.integrated %>%\n  filter(`CSAT (n)` != 0, !is.na(`CSAT (n)`)) %>%\n  group_by(Date) %>%\n  summarize_at(vars(LA_CSAT = CSAT, LA_avg = `Running CSAT Average`), list(~ mean(., na.rm=TRUE)))\n\nCSAT.clinic <- CSAT %>%\n  filter(Site %in% clinic_ids) %>%\n  mutate(Date = floor_date(Date, \"month\"), \n         Average = lag(`Running CSAT Average`, n = 1)) %>%\n  group_by(Date) %>%\n  summarize(\n    Date = mean(Date, na.rm = TRUE),\n    CSAT = mean(CSAT, na.rm = TRUE),\n    CSAT_n = mean(`CSAT (n)`, na.rm = TRUE),\n    Average = mean(Average, na.rm = TRUE)\n  ) %>%\n  filter(!is.na(`Average`), !is.na(`CSAT`)) %>%\n  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%\n  left_join(CSAT.groups, by=\"Date\")\n\n\nCSAT.clinic.recent <- CSAT.clinic %>%\n  arrange(desc(Date)) %>%\n  slice(1:18) %>%\n  mutate(pred = FALSE)\n\nCSAT.clinic.predict <- CSAT.predict %>%\n  filter(Site %in% clinic_ids) %>%\n  mutate(Date = floor_date(Date, \"month\")) %>%\n  left_join(CSAT.integrated %>% select(Date, Site, Average = `Running CSAT Average`), by=c(\"Date\", \"Site\")) %>%\n  select(-c(Site), CSAT_n = `CSAT (n)`) %>%\n  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%\n  left_join(CSAT.groups, by=\"Date\") %>%\n  slice(1:2) %>%\n  mutate(pred = TRUE)\n  \nCSAT.charting <- CSAT.clinic.recent %>%\n  mutate(Date = as.Date(Date)) %>%\n  arrange(Date) %>%\n  bind_rows(CSAT.clinic.predict)\n\nbettermonth = CSAT.clinic.recent$CSAT[1] > CSAT.clinic.recent$Average[1]\n\nCSAT.text.clinic <- paste0(\"In \", format(CSAT.clinic.recent$Date[1], \"%B %Y\"), \", the customer satisfaction score was \", ifelse(bettermonth, \" better\", \" worse\"), \" than average for \", manager_name, \"'s clinics.\", ifelse(bettermonth, \" Good work!\", \"\"))\n\nCSAT.all.now <- CSAT %>%\n  drop_na() %>%\n  filter(Date == max(Date))\n\nCSAT.average.now <- sum(CSAT.all.now$`CSAT Points`) / sum(CSAT.all.now$`CSAT (n)`)\n\nCSAT.text.agency <- paste0(\"Agency-wide, \", manager_name, \"'s clinics brought the average for Dallas County clinics\", ifelse(CSAT.clinic.recent$CSAT[1] > CSAT.average.now, \" up. Nice!\", \" down. Keep working!\"))\n\nCSAT.text.trend <- paste0(\"Over the last 18 months, the scores for \", manager_name, \"'s clinics have \",\n                         ifelse(CSAT.clinic.recent$Average[1] > CSAT.clinic.recent$Average[18],\n                                \" increased overall.\", \n                                \" decreased overall.\"),\n                         \" Over the last 3 months, the scores have \",\n                         ifelse(CSAT.clinic.recent$Average[1] > CSAT.clinic.recent$Average[3],\n                                \" increased\", \n                                \" decreased\"),\n                         \" on average. Based on past trends, the scores are predicted to \",\n                         ifelse(CSAT.charting$CSAT[18] > CSAT.charting$CSAT[19],\n                                \"fall next month, so work hard to beat the odds!\",\n                                \"increase next month, so work hard to make that come true!\"))\n\nCSAT.clinic.recent <- CSAT.clinic.recent %>% arrange(Date)\n\n# CSAT.sparkline <- sparkline(round(as.vector(CSAT.clinic.recent$Average), 4), \"line\", \n#           list(lineColor = palette_cpal_teal[6],\n#                fillColor = palette_cpal_teal[2],\n#                width = \"200px\",\n#                height = \"80px\"))\n\n```\n\n<!--\nGenerate radar chart that:\n - compares POE themes by fulfillment\n PRODUCT: \"POEradar\"\n-->\n\n```{r POEradar, echo=FALSE, output=FALSE}\nPOEradar <- plot_ly(df.recent.themes.long.filtered, \n                    r = ~Value, \n                    theta = ~Theme, \n                    type = 'scatterpolar', \n                    mode = \"markers\", \n                    fill = 'toself', \n                    hoverinfo = \"none\",\n                    marker = list(color = palette_cpal_main[1]),\n                    fillcolor = \"rgba(0,128,151,0.5)\") %>%\n  layout(\n    title = \"\",\n    font = list(family = \"Poppins\"),\n    plot_bgcolor = \"rgba(0,0,0,0)\",\n    paper_bgcolor = \"rgba(0,0,0,0)\",\n    polar = list(\n      radialaxis = list(\n        visible = T,\n        showticklabels = F,\n        range = c(0,1),\n        linecolor = \"rgba(0,0,0,0)\",\n        tickcolor = \"rgba(0,0,0,0)\"\n      ),\n       angularaxis = list(\n        showticklabels = T\n      )\n    ),\n    showlegend = F\n  ) %>% \n  config(displayModeBar = F)\n\n# make scaling obvious\n# bold theme names\n```\n\n<!--\nGenerate area-under-the-line chart that:\n - shows POE fulfillment by phase over time\n PRODUCT: \"POEarea\"\n-->\n\n```{r POEarea, echo=FALSE, output=FALSE}\nphase_cols <- grep(\"^phase\", names(df.phase.clinic), value = TRUE)\n\nPOEarea <- NULL\n\nfor(i in seq_along(phase_cols)) {\n  legend_name = sub(\"phase\", \"Phase \", phase_cols[i])\n  if (is.null(POEarea)){\n    POEarea <- plot_ly(df.phase.clinic, \n                      hoverinfo = \"none\",\n                      x = ~Date, \n                      y = as.formula(paste0(\"~`\", phase_cols[i], \"`\")),\n                      name = legend_name, \n                      fill = 'tozeroy',\n                      fillcolor = palette_cpal_main[phase_cols[i]],\n                      type = 'scatter', \n                      mode = 'none')\n  } else {\n    POEarea <- POEarea %>%\n      add_trace(y = as.formula(paste0(\"~`\", phase_cols[i], \"`\")),\n                name = legend_name, \n                fill = 'tozeroy',\n                fillcolor = palette_cpal_main[phase_cols[i]])\n  }\n}\n\nPOEarea <- POEarea %>%\n  layout(title = \"\",\n         font = list(family = \"Poppins\"),\n         plot_bgcolor = \"rgba(0,0,0,0)\",\n         paper_bgcolor = \"rgba(0,0,0,0)\",\n         xaxis = list(title = \"\"),\n         yaxis = list(title = \"\",\n                      tickformat = \"0%\",\n                      range = c(0, 1))) %>%\n  add_segments(\n    x = min(df.phase.clinic$Date),\n    xend = max(df.phase.clinic$Date),\n    y = 0.9,\n    yend = 0.9,\n    line = list(dash = \"dash\", color = \"#2f2f2f\"),\n    inherit = FALSE,\n    showlegend = FALSE\n  ) %>%\n  add_annotations(\n    x = max(df.phase.clinic$Date),\n    y = 0.9,\n    text = \"<i>Goal</i>\",\n    showarrow = FALSE,\n    font = list(size = 12),\n    xanchor = 'left',\n    yanchor = 'middle'\n  ) %>% \n  config(displayModeBar = F)\n\n\n```\n\n<!--\nGenerate stacked bar chart that:\n - shows staffing levels for each role\n - shows vacancies\n PRODUCT: \"staffchart\"\n-->\n\n```{r staffchart, echo=FALSE, output=FALSE}\ncount_df$Role <- tools::toTitleCase(count_df$Role)\n\nstaffchart <- plot_ly(count_df, \n                      x = ~Active, \n                      y = ~Role, \n                      name = \"Active\", \n                      marker=list(color=cpaltemplates::palette_cpal_teal[6]), \n                      type = 'bar', \n                      hoverinfo = \"none\", \n                      orientation = 'h',\n                      text = ~Active,\n                      textposition = 'auto',\n                      insidetextanchor=\"middle\") %>%\n  add_trace(x = ~Temps,\n            y = ~Role,\n            name = \"Temporary/inactive\", \n            marker=list(color=cpaltemplates::palette_cpal_teal[3]),\n            text = ~Temps,\n            textposition = 'auto',\n            insidetextanchor=\"middle\") %>%\n  add_trace(x = ~Vacancies,\n            y = ~Role,\n            name = \"Vacant\", \n            marker=list(color=cpaltemplates::palette_cpal_red[3]),\n            text = ~Vacancies,\n            textposition = 'auto',\n            insidetextanchor=\"middle\") %>%\n  layout(font = list(family = \"Poppins\"),\n         plot_bgcolor = \"rgba(0,0,0,0)\",\n         paper_bgcolor = \"rgba(0,0,0,0)\",\n         yaxis = list(title = \"\",\n                      categoryorder = \"array\",\n                      categoryarray = c(\"Clerk\", \"Certifier\", \"Supervisor\"),\n                      automargin = TRUE,\n                      tickfont = list(size = 12),\n                      ticksuffix = \"   \"), # add 3 spaces after y-label\n         xaxis = list(title = \"\",\n                      gridwidth = 2,\n                      dtick = 1), \n         barmode = 'stack') %>% \n  config(displayModeBar = F)\n\n```\n\n<!--\n---CURRENTLY DEPRECATED---\nGenerate line chart that:\n - qualtrics\n PRODUCT: \"qual_chart\"\n-->\n\n```{r qualchart,  echo=FALSE, output=FALSE}\n\nqualchart = NULL\n\n# latest_df <- CSAT.charting %>% \n#   filter(pred == FALSE) %>%\n#   arrange(desc(Date)) %>%\n#   slice(1)\n# \n# CSAT_value <- latest_df$CSAT\n# \n# LA_CSAT_value <- latest_df$LA_CSAT\n# \n# current_month_CSAT <- CSAT.charting %>% \n#   filter((year(Date) == year(Sys.Date())) & (month(Date) == month(Sys.Date()))) %>%\n#   pull(CSAT)\n# \n# compare_df <- data.frame(\n#   Value = c(CSAT_value, LA_CSAT_value, current_month_CSAT),\n#   Label = c(\n#     paste(\"Customer satisfaction for\", format(latest_df$Date, \"%B %Y\")),\n#     \"Dallas County average\",\n#     \"Predicted score for this month\"\n#   ),\n#   Color = c(palette_cpal_main[1], palette_cpal_main[2], \"grey\"),\n#   X_position = c(1, 1.2, 1)\n# )\n# \n# compare_df$Color <- factor(compare_df$Color, labels = compare_df$Label)\n# \n# qual_chart <- ggplot(compare_df, aes(x = X_position, y = Value, color = Color)) +\n#   geom_segment(\n#     aes(x = 1, y = ifelse(Value[1] > Value[3], Value[1] - 0.003, Value[1] + 0.003), xend = 1, yend = ifelse(Value[1] > Value[3], Value[3] + 0.003, Value[1] - 0.003)),\n#     arrow = arrow(type = \"closed\", length = unit(0.1, \"inches\")),\n#     color = \"grey\", linewidth = 0.9, linetype = \"dashed\"\n#   ) +\n#   geom_point(size = 6) +\n#   scale_color_manual(values = c(palette_cpal_main[1], palette_cpal_main[2], \"grey\")) +\n#   coord_cartesian(xlim = c(0.9, 2)) +\n#   theme_light() +\n#   theme(\n#     plot.background = element_rect(fill = \"transparent\"),\n#     axis.ticks.x = element_blank(),\n#     axis.text.x = element_blank(),\n#     axis.title.x = element_blank(),\n#     axis.title.y = element_blank(),\n#     panel.grid.major = element_blank(),\n#     panel.grid.minor = element_blank(),\n#     axis.line = element_blank(),\n#     panel.border = element_blank(),\n#     text = element_text(size = 14)\n#   )\n\n# qualchart <- plot_ly(CSAT.clinic.recent, x = ~Date, y = ~delta, type = 'bar', hoverinfo = \"none\", \n#                marker = list(color = ~color)) %>% \n#         layout(plot_bgcolor = \"rgba(0,0,0,0)\",\n#                paper_bgcolor = \"rgba(0,0,0,0)\",\n#                yaxis = list(zeroline = TRUE, \n#                             zerolinecolor = 'black', \n#                             showticklabels = FALSE,\n#                             title = \"\",\n#                             range = c(-0.5, 0.5)\n#                             ), \n#                title = \"\",\n#                xaxis = list(title = \"Month\")\n#                ) %>%\n#         add_annotations(x = -0.075, y = 0, \n#                         text = \"average\", \n#                         showarrow = FALSE, \n#                         font = list(size = 12),\n#                         xref = 'paper',\n#                         yref = 'y'\n#                        ) %>%\n#         add_annotations(x = -0.05, y = 0.25, \n#                         text = \"better\", \n#                         showarrow = FALSE, \n#                         font = list(size = 12),\n#                         xref = 'paper',\n#                         yref = 'y',\n#                         textangle = -90\n#                        ) %>%\n#         add_annotations(x = -0.05, y = -0.25, \n#                         text = \"worse\", \n#                         showarrow = FALSE, \n#                         font = list(size = 12),\n#                         xref = 'paper',\n#                         yref = 'y',\n#                         textangle = -90\n#                        )\n\n# ggplotly(\n#   ggplot(CSAT.charting, aes(x = Date)) +\n#   geom_line(aes(y = LA_avg), linetype = \"dotted\", color = \"black\", linewidth = 1.25) +\n#   geom_line(aes(y = Average), color = \"blue\", linewidth = 1.25) +\n#   geom_segment(aes(xend = Date,\n#                  y = Average + delta,\n#                  yend = Average,\n#                  color = delta > 0),\n#              size = 1.5,\n#              linetype = \"dotted\",\n#              show.legend = FALSE) +\n#   geom_point(aes(x = Date,\n#                  y = Average + delta,\n#                  color = delta > 0),\n#              size = 4,\n#              show.legend = FALSE) +\n#   scale_color_manual(values = c(\"red\", \"green\")) +\n#   ylim(6, 7) +\n#   theme_minimal() +\n#   labs(x = \"Month\", y = \"CSAT Score\", color = \"CSAT above/below average\")\n# )\n\n# ggplot(CSAT.clinic.recent, aes(x = Date)) +\n#   geom_line(aes(y = LA_avg), linetype = \"dotted\", color = \"black\", size = 1.5) +\n#   geom_line(aes(y = Average), color = \"blue\", size= 1.5) +\n#   geom_line(aes(y = CSAT, group = 1, color = ifelse(CSAT > lag(CSAT), \"green\", \"red\")), size = 1.5) +\n#   ylim(6, 7) +\n#   scale_color_manual(values = c(\"red\", \"green\")) +\n#   theme_minimal() +\n#   labs(x = \"Month\", y = \"CSAT Score\", color = \"CSAT above/below average\")\n\n# ggplot(CSAT.charting, aes(x = Date)) +\n#   geom_smooth(aes(y = LA_avg, group = 1, color = ifelse(LA_avg > lag(LA_avg), \"#008097\", \"#E98816\")), linetype = \"dashed\", linewidth = 1.1) +\n#   geom_smooth(aes(y = Average), linewidth = 1.1, color = \"#008097\") +\n#   geom_segment(aes(xend = Date, \n#                    y = Average + delta,\n#                    yend = Average,\n#                    color = delta),\n#                size = 0.5,\n#                linetype = \"dotted\",\n#                show.legend = FALSE,) +\n#   geom_point(aes(x = Date, \n#                  y = Average + delta,\n#                  size = 5 * CSAT_n/max(CSAT_n)),\n#              color = \"#ffffff\",\n#              show.legend = FALSE) +\n#   geom_point(aes(x = Date, \n#                  y = Average + delta,\n#                  color = delta,\n#                  size = 4 * CSAT_n/max(CSAT_n)),\n#              show.legend = FALSE) +\n#   ylim(6, 7) +\n#   labs(x = \"Month\", y = \"CSAT Score\", color = \"CSAT above/below average\") +\n#   scale_color_gradientn(colors = cpaltemplates::palette_cpal_diverging) +\n#   theme(panel.background = element_rect(fill = \"transparent\", color = NA)) +\n#   guides(color = \"none\")\n\n```\n\n<!--\n################################################################################\nDASHBOARD LAYOUT TEMPLATE STARTS HERE\n-->\n\n```{=html}\n<div class=\"d-flex align-items-center\">\n    <div style=\"display: inline-block; border: 1px solid #2f2f2f; border-radius: 5px; padding: 10px; \">\n        \n        <div style=\"font-size: 2em; font-weight: bold; color: #2f2f2f; font-family: 'Poppins', sans-serif;\">\n            <i class=\"bi bi-person-fill mr-2\"></i>\n            `r params$manager_name`'s clinics\n        </div>\n        \n        <div style=\"font-size: 1em; color: #2f2f2f; font-family: 'Poppins', sans-serif; padding-top: 10px;\">\n            `r paste0(\"<a href='\", gsub(\" \", \"_\", clinic_names), \".html'>\", clinic_names, \"</a>\", collapse = \", \")`\n        </div>\n        \n        <div style=\"font-size: 1em; font-style: italic; color: #2f2f2f; font-family: 'Poppins', sans-serif; padding-top: 10px;\">\n            Number of `r ptcp %>% filter(Site %in% clinic_ids) %>% pull(Date) %>% max(na.rm = TRUE) %>% format(\"%B %Y\")` participants: <b>`r ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE), .groups = \"drop\") %>% filter(Date == ptcp %>% filter(Site %in% clinic_ids) %>% pull(Date) %>% max(na.rm = TRUE)) %>% pull(Participation) %>% sum() %>% format(big.mark = \",\")`</b>\n        </div>\n        \n    </div>\n</div>\n```\n\n## Clinic environment\n\n#### `r improvement_text`\n\n#### `r phase_text`\n\n`r POEarea`\n\n#### `r performance_text`\n\n`r POEradar`\n\n::: {.callout-tip}\n\n#### Phases and themes\n\nRead more about the goals that go into [phases](phases.html) and [themes](themes.html).\n:::\n\n## Staffing\n\n#### `r vacancy_text`\n\n`r staffchart`\n\n## Customer satisfaction\n\n- `r CSAT.text.clinic`\n\n- `r CSAT.text.agency`\n\n- `r CSAT.text.trend`\n","srcMarkdownNoYaml":"\n\n\n<!--\n\n## DASHBOARD TEMPLATE ##\n\nThis template for clinic dashboards is in the following order:\n 1. Dynamic text generations\n 2. Visualization generations\n 3. Layout of dashboard using variables from generations\n \n-->\n\n```{r setup, echo=FALSE, output=FALSE}\nlibrary(tidyverse)\nlibrary(googlesheets4)\nlibrary(tsutils)\nlibrary(plotly)\nlibrary(readxl)\nlibrary(glue)\nlibrary(stringr)\nlibrary(waffle)\nlibrary(forecast)\nlibrary(tsibble)\nlibrary(cpaltemplates)\n\nmanager_name = params$manager_name\n\ndata_dir <- \"C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/\"\n\nfiles <- list.files(path = data_dir, pattern = \"\\\\.csv$\")\n\nfor (file in files) {\n  file_name <- tools::file_path_sans_ext(file)\n  if (file_name == \"ptcp\") {\n    assign(gsub(\"__\", \"\\\\.\", file_name), read_csv(file = paste0(data_dir, file)) %>%\n             rename(Date = colnames(.)[1]) %>%\n             mutate(Date = as.Date(Date)))\n  } else {\n    assign(gsub(\"__\", \"\\\\.\", file_name), read_csv(file = paste0(data_dir, file)))\n  }\n}\n\nclinic_names = clinic_map$Clinic[clinic_map$Manager == manager_name]\nclinic_ids = clinic_map$Site[clinic_map$Manager == manager_name]\n\n## make sure poppins is installed locally\npoppins_import()\n\nset_cpal_defaults()\n\nbold_color <- function(text, color) {\n  paste0(\"<b style='color:\", color, \"'>\", text, \"</b>\")\n}\n\n# high performance threshold for POEs (90%)\nthreshold = 0.9\n\n# fail threshold (50%)\nfail = 0.5\n\n# maximum acceptable num. families in waiting room at once\nmaxFamiliesWaiting = 8\n\n# dynamic text prep\noxford_comma <- function(x) {\n  if (length(x) > 2) {\n    paste(paste(x[-length(x)], collapse=\", \"), \"and\", x[length(x)])\n  } else {\n    paste(x, collapse=\" and \")\n  }\n}\n\ncurrent_date <- Sys.Date()\ncurrent_year <- as.integer(format(Sys.Date(), \"%Y\"))\ncurrent_month <- as.integer(format(Sys.Date(), \"%m\"))\n\n```\n\n\n<!--\nSet aside numbers of families waiting, specify phases\n-->\n\n```{r preprocess, echo=FALSE, output=FALSE}\ndf.familiesWaiting <- df %>% \n  select(Site, Date, `# of Families Waiting`) %>%\n  rename(familiesWaiting = `# of Families Waiting`) %>%\n  drop_na()\n\ndf <- df %>%\n  mutate(`# of Families Waiting` = 1 / exp(`# of Families Waiting` / maxFamiliesWaiting))\n\ndf.phase <- df %>%\n  select(-Clinic, -Manager) %>%\n  group_by(Site) %>%\n  replace(is.na(.), 0) %>% \n  pivot_longer( cols = -c(1:2), names_to = \"variable\", values_to = \"score\") %>%\n  left_join(POE, by = \"variable\") %>%\n  group_by(Site, Date, phase) %>%\n  summarise(score = mean(score, na.rm = TRUE)) %>%\n  pivot_wider(names_from = phase, values_from = score) %>%\n  rename_with(~ifelse(grepl(\"^\\\\d+$\", .), paste0(\"phase\", .), .), -c(Site, Date))\n```\n\n\n<!--\nSummarize POE data from individual criteria into categories and even wider themes\n-->\n\n\n```{r categories, echo=FALSE, output=FALSE}\n\ndf.grouped.long <- df %>%\n  select(-Clinic, -Manager) %>%\n  pivot_longer(\n    cols = -c(Site, Date), \n    names_to = \"variable\", \n    values_to = \"value\"\n  ) %>%\n  merge(POE, by = \"variable\") %>%\n  group_by(Site, Date, category) %>%\n  summarise(Value = mean(value, na.rm = TRUE), .groups = \"drop\")\n  \ndf.grouped <- df.grouped.long %>% \n  pivot_wider(\n    names_from = category, \n    values_from = Value\n  )\n\n##  THEMES DF\ndf.themes.long <- df %>%\n  select(-Clinic, -Manager) %>%\n  pivot_longer(\n    cols = -c(Site, Date), \n    names_to = \"variable\", \n    values_to = \"value\"\n  ) %>%\n  merge(POE, by = \"variable\") %>%\n  group_by(Site, Date, theme) %>%\n  summarise(Value = mean(value, na.rm = TRUE), .groups = \"drop\")\n  \ndf.themes <- df.themes.long %>% \n  pivot_wider(\n    names_from = theme, \n    values_from = Value\n  )\n\n```\n\n<!--\nSnapshot of only the most recent data to see current fulfillment\n-->\n\n```{r snapshot, echo=FALSE, output=FALSE}\n##  DETAILED RECENT SNAPSHOT\ndf.recent <- df %>%\n  group_by(Site) %>%\n  slice(which.max(Date)) %>%\n  select(-c(\"Date\"))\n\n##  GROUPED RECENT SNAPSHOT\ndf.recent.grouped <- df.grouped %>%\n  group_by(Site) %>%\n  slice(which.max(Date)) %>%\n  select(-c(\"Date\"))\n\n##  THEMED RECENT SNAPSHOT\ndf.recent.themes <- df.themes %>%\n  group_by(Site) %>%\n  slice(which.max(Date)) %>%\n  select(-c(\"Date\"))\n\n### long form of themes for radar charts later\ndf.recent.themes.long <- df.recent.themes %>%\n  pivot_longer(cols = starts_with(c(\"Hospitality\", \"Communication\", \"Layout\", \"Efficiency\", \"Safety\")),\n               names_to = \"Theme\",\n               values_to = \"Value\")\n\n```\n\n\n<!--\nAGENCY-WIDE PREPROCESSING STOPS HERE -- BELOW ARE GENERATIONS\n-->\n\n\n<!--\nGenerate dynamic text that: \n - separates into themes\n - determines strengths based on 'threshold'\n - determines fails based on 'fail'\n PRODUCT: \"phase_text\"\n-->\n\n```{r phasetext, echo=FALSE, output=FALSE}\ndf.phase.clinic <- df.phase %>%\n  # ungroup() %>%\n  # mutate_if(is.numeric, ~./(ncol(.) - 2)) %>%\n  filter(Site %in% clinic_ids) %>%\n  select(-Site) %>%\n  group_by(Date) %>%\n  summarize(phase1 = mean(phase1, na.rm = TRUE),\n            phase2 = mean(phase2, na.rm = TRUE))\n\nphase_eval <- df.phase.clinic %>%\n  filter(Date == max(df.phase.clinic$Date)) %>%\n  ungroup() %>% select(-c(Date)) %>% \n  gather(key = \"phase\", value = \"metric\") %>%\n  mutate(phase = gsub(\"(phase)(\\\\d+)\", \"Phase \\\\2\", phase),\n         evaluation = if_else(metric > threshold,\n                              \"fulfilled\",\n                              \"not_fulfilled\"))\n\n# create grouped phase strings\nphase_eval.strong <- phase_eval %>% filter(evaluation == \"fulfilled\") %>% mutate(colored_phase = paste0(\"<span style='color:\", palette_cpal_main[stringr::str_remove(phase, \"Phase \")],\"'>\", phase, \"</span>\")) %>% pull(colored_phase) %>% paste(collapse = \", \")\nphase_eval.weak <- phase_eval %>% filter(evaluation == \"not_fulfilled\") %>% mutate(colored_phase = paste0(\"<span style='color:\", palette_cpal_main[stringr::str_remove(phase, \"Phase \")],\"'>\", phase, \"</span>\")) %>% pull(colored_phase) %>% paste(collapse = \", \")\n\n# Use your oxford_comma function to make it look better\nphase_eval.strong <- oxford_comma(strsplit(phase_eval.strong, \", \")[[1]])\nphase_eval.weak <- oxford_comma(strsplit(phase_eval.weak, \", \")[[1]])\n\nphase_text <- paste(if (nchar(phase_eval.strong) > 0) \n                             paste0(\"Nice job getting \", phase_eval.strong, \" fulfillment above \", \"<span style='color:#2f2f2f'>\", sprintf(\"%.f%%\", threshold*100), \"</span>\", \"!\"),\n                           if (nchar(phase_eval.weak) > 0) \n                             paste0(\"Work on getting \", phase_eval.weak, \" targets up.\"))\n```\n\n\n<!--\nGenerate dynamic text that:\n - counts how many POE fails there are by phase\n - if there are 5 or fewer, lists them all\n - if there are more than 5, picks 5 at random to serve as monthly targets\n PRODUCT: \"improvement_text\"\n-->\n\n```{r improvement_targets, echo=FALSE, output=FALSE}\ndf.recent.long <- df.recent %>%\n  select(-Clinic, -Manager) %>%\n  pivot_longer(cols = -c(1),\n               names_to = \"variable\",\n               values_to = \"Value\") %>%\n  merge(POE, by = \"variable\") %>%\n  select(Site, Value, improvement_phrase, phase)\n\ndf.clinic_fails <- df.recent.long %>%\n  filter(Site %in% clinic_ids) %>%\n  select(-Site) %>%\n  group_by(phase, improvement_phrase) %>%\n  summarize(Value = mean(Value, na.rm = TRUE)) %>%\n  filter(Value < fail)\n\nfail_count <- df.clinic_fails %>%\n  count(phase) %>%\n  mutate(name = paste0(\"Phase \", phase),\n         color = palette_cpal_main[phase],\n         message = glue_col(\"{n} items in <span style='color:{color}'>{name}</span>\")) %>%\n  pull(message)\n\nfail_count_string <- paste(fail_count, collapse = \", \")\n\nif(length(fail_count) > 1) {\n  fail_count_string <- stringr::str_replace(fail_count_string, \"\\\\,(?=[^,]*$)\", \" and\")\n}\n\nimproves <- df.clinic_fails %>% \n  { if(nrow(.) > 5) \n      slice_sample(., n = 5)\n    else \n      .\n  } %>% pull(improvement_phrase)\n\nimprovements_string <- paste0(\"\\n\\n - \", paste(improves, collapse = \"\\n\\n - \"))\n\nimprovement_text <- knitr::asis_output(glue(\n  \"{manager_name}'s clinics overall have {knitr::asis_output(fail_count_string)} that need improvement. \n  {if (length(improves) > 0) {\n    paste('Here are some goals to have your supervisors focus on:', improvements_string)\n  } else {\n    'Wonderful work! You and your employees are a WIC superstars!'\n  }}\"\n))\n\n```\n\n<!--\nGenerate dynamic text that:\n - summarizes recent performance by theme\n - separates strengths and fails\n PRODUCT: \"performance_text\"\n-->\n\n```{r themes, echo=FALSE, output=FALSE}\ndf.recent.themes.long.filtered <- df.recent.themes.long %>% \n  filter(Site %in% clinic_ids) %>%\n  select(-Site) %>%\n  group_by(Theme) %>%\n  summarize(Value = mean(Value, na.rm = TRUE))\n\nstrong_themes <- df.recent.themes.long.filtered %>% \n  filter(Value > threshold) %>% \n  pull(Theme) %>% \n  tolower()\n\nweak_themes <- df.recent.themes.long.filtered %>% \n  filter(Value < fail) %>% \n  pull(Theme) %>% \n  tolower()\n\nstrong_text <- if (length(strong_themes) > 0) {\n  paste0(manager_name, \"'s clinics are strong in \", oxford_comma(strong_themes), \".\")\n} else {\n  \"\"\n}\n\nweak_text <- if (length(weak_themes) > 0) {\n  paste0(\"Focus on improving clinic \", oxford_comma(weak_themes), \".\")\n} else {\n  \"There aren't any particularly weak areasâ€”keep up the good work!\"\n}\n\nperformance_text <- paste(strong_text, weak_text)\n\n```\n\n<!--\nGenerate dynamic text that:\n - calculates vacancies by role\n - suggests staff hirings\n PRODUCT: \"vacancy_text\"\n-->\n\n```{r vacancies, echo=FALSE, output=FALSE}\nsummarize_role <- function(df, clinic_ids, role) {\n  df %>%\n    filter(Site %in% clinic_ids, Role == role) %>%\n    summarize(\n      Vacancies = sum(Vacant == \"TRUE\", na.rm = TRUE),\n      Temps = sum(`In training` == \"TRUE\" | `Temp` == \"TRUE\" | `Part-time` == \"TRUE\" | `On leave` == \"TRUE\", na.rm = TRUE),\n      `WCS trainees` = sum(`WCS trainee` == \"TRUE\", na.rm = TRUE),\n      Active = n() - Vacancies - Temps,\n      Role = role\n    )\n}\n\nroles <- c(\"clerk\", \"certifier\", \"supervisor\")\ncount_df <- purrr::map_dfr(roles, summarize_role, df = staff, clinic_ids = clinic_ids)\n\ncreate_vacancy_sentence <- function(df) {\n  if (!any(df$Vacancies > 0)) {\n    return(\"There are no vacancies right now. Nice job!\")\n  }\n  \n  vacancy_df <- df %>%\n    filter(Vacancies > 0) %>%\n    mutate(\n      RolePlural = ifelse(Vacancies > 1, paste0(Role, \"s\"), Role),\n      RoleSentence = paste(Vacancies, RolePlural, \"and\")\n    ) %>%\n    summarise(vacancy_sentence = stringr::str_c(RoleSentence, collapse = \" \")) %>%\n    mutate(vacancy_sentence = stringr::str_remove(vacancy_sentence, \" and$\"))\n    \n  vacancy_sentence <- stringr::str_glue(\"Consider hiring {vacancy_df$vacancy_sentence} to meet staffing needs.\")\n  \n  return(vacancy_sentence)\n}\n\nvacancy_text <- create_vacancy_sentence(count_df)\n```\n\n<!--\nGenerate dynamic text that:\n - qualtrics\n PRODUCT: \"CSATtext\"\n-->\n\n```{r CSATtext, echo=FALSE, output=FALSE}\nCSAT.integrated <- CSAT %>%\n  drop_na() %>%\n  bind_rows(CSAT.predict) %>%\n  arrange(Site, Date) %>%\n  mutate(Date = floor_date(Date, \"month\"),\n         `CSAT Points` = ifelse(is.na(`CSAT Points`), CSAT * `CSAT (n)`, `CSAT Points`)\n         ) %>%\n  group_by(Site) %>%\n  do({\n    firstP = first(.$`Running CSAT Points`)\n    firstn = first(.$`Running CSAT n`)\n    mutate(., `Running CSAT Points` = firstP + cumsum(`CSAT Points`),\n           `Running CSAT n` = firstn + cumsum(`CSAT (n)`),) \n  }) %>%\n  mutate(`Running CSAT Average` = `Running CSAT Points` / `Running CSAT n`)\n\nCSAT.groups <- CSAT.integrated %>%\n  filter(`CSAT (n)` != 0, !is.na(`CSAT (n)`)) %>%\n  group_by(Date) %>%\n  summarize_at(vars(LA_CSAT = CSAT, LA_avg = `Running CSAT Average`), list(~ mean(., na.rm=TRUE)))\n\nCSAT.clinic <- CSAT %>%\n  filter(Site %in% clinic_ids) %>%\n  mutate(Date = floor_date(Date, \"month\"), \n         Average = lag(`Running CSAT Average`, n = 1)) %>%\n  group_by(Date) %>%\n  summarize(\n    Date = mean(Date, na.rm = TRUE),\n    CSAT = mean(CSAT, na.rm = TRUE),\n    CSAT_n = mean(`CSAT (n)`, na.rm = TRUE),\n    Average = mean(Average, na.rm = TRUE)\n  ) %>%\n  filter(!is.na(`Average`), !is.na(`CSAT`)) %>%\n  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%\n  left_join(CSAT.groups, by=\"Date\")\n\n\nCSAT.clinic.recent <- CSAT.clinic %>%\n  arrange(desc(Date)) %>%\n  slice(1:18) %>%\n  mutate(pred = FALSE)\n\nCSAT.clinic.predict <- CSAT.predict %>%\n  filter(Site %in% clinic_ids) %>%\n  mutate(Date = floor_date(Date, \"month\")) %>%\n  left_join(CSAT.integrated %>% select(Date, Site, Average = `Running CSAT Average`), by=c(\"Date\", \"Site\")) %>%\n  select(-c(Site), CSAT_n = `CSAT (n)`) %>%\n  mutate(delta = ifelse(CSAT_n > 0, CSAT - Average, 0)) %>%\n  left_join(CSAT.groups, by=\"Date\") %>%\n  slice(1:2) %>%\n  mutate(pred = TRUE)\n  \nCSAT.charting <- CSAT.clinic.recent %>%\n  mutate(Date = as.Date(Date)) %>%\n  arrange(Date) %>%\n  bind_rows(CSAT.clinic.predict)\n\nbettermonth = CSAT.clinic.recent$CSAT[1] > CSAT.clinic.recent$Average[1]\n\nCSAT.text.clinic <- paste0(\"In \", format(CSAT.clinic.recent$Date[1], \"%B %Y\"), \", the customer satisfaction score was \", ifelse(bettermonth, \" better\", \" worse\"), \" than average for \", manager_name, \"'s clinics.\", ifelse(bettermonth, \" Good work!\", \"\"))\n\nCSAT.all.now <- CSAT %>%\n  drop_na() %>%\n  filter(Date == max(Date))\n\nCSAT.average.now <- sum(CSAT.all.now$`CSAT Points`) / sum(CSAT.all.now$`CSAT (n)`)\n\nCSAT.text.agency <- paste0(\"Agency-wide, \", manager_name, \"'s clinics brought the average for Dallas County clinics\", ifelse(CSAT.clinic.recent$CSAT[1] > CSAT.average.now, \" up. Nice!\", \" down. Keep working!\"))\n\nCSAT.text.trend <- paste0(\"Over the last 18 months, the scores for \", manager_name, \"'s clinics have \",\n                         ifelse(CSAT.clinic.recent$Average[1] > CSAT.clinic.recent$Average[18],\n                                \" increased overall.\", \n                                \" decreased overall.\"),\n                         \" Over the last 3 months, the scores have \",\n                         ifelse(CSAT.clinic.recent$Average[1] > CSAT.clinic.recent$Average[3],\n                                \" increased\", \n                                \" decreased\"),\n                         \" on average. Based on past trends, the scores are predicted to \",\n                         ifelse(CSAT.charting$CSAT[18] > CSAT.charting$CSAT[19],\n                                \"fall next month, so work hard to beat the odds!\",\n                                \"increase next month, so work hard to make that come true!\"))\n\nCSAT.clinic.recent <- CSAT.clinic.recent %>% arrange(Date)\n\n# CSAT.sparkline <- sparkline(round(as.vector(CSAT.clinic.recent$Average), 4), \"line\", \n#           list(lineColor = palette_cpal_teal[6],\n#                fillColor = palette_cpal_teal[2],\n#                width = \"200px\",\n#                height = \"80px\"))\n\n```\n\n<!--\nGenerate radar chart that:\n - compares POE themes by fulfillment\n PRODUCT: \"POEradar\"\n-->\n\n```{r POEradar, echo=FALSE, output=FALSE}\nPOEradar <- plot_ly(df.recent.themes.long.filtered, \n                    r = ~Value, \n                    theta = ~Theme, \n                    type = 'scatterpolar', \n                    mode = \"markers\", \n                    fill = 'toself', \n                    hoverinfo = \"none\",\n                    marker = list(color = palette_cpal_main[1]),\n                    fillcolor = \"rgba(0,128,151,0.5)\") %>%\n  layout(\n    title = \"\",\n    font = list(family = \"Poppins\"),\n    plot_bgcolor = \"rgba(0,0,0,0)\",\n    paper_bgcolor = \"rgba(0,0,0,0)\",\n    polar = list(\n      radialaxis = list(\n        visible = T,\n        showticklabels = F,\n        range = c(0,1),\n        linecolor = \"rgba(0,0,0,0)\",\n        tickcolor = \"rgba(0,0,0,0)\"\n      ),\n       angularaxis = list(\n        showticklabels = T\n      )\n    ),\n    showlegend = F\n  ) %>% \n  config(displayModeBar = F)\n\n# make scaling obvious\n# bold theme names\n```\n\n<!--\nGenerate area-under-the-line chart that:\n - shows POE fulfillment by phase over time\n PRODUCT: \"POEarea\"\n-->\n\n```{r POEarea, echo=FALSE, output=FALSE}\nphase_cols <- grep(\"^phase\", names(df.phase.clinic), value = TRUE)\n\nPOEarea <- NULL\n\nfor(i in seq_along(phase_cols)) {\n  legend_name = sub(\"phase\", \"Phase \", phase_cols[i])\n  if (is.null(POEarea)){\n    POEarea <- plot_ly(df.phase.clinic, \n                      hoverinfo = \"none\",\n                      x = ~Date, \n                      y = as.formula(paste0(\"~`\", phase_cols[i], \"`\")),\n                      name = legend_name, \n                      fill = 'tozeroy',\n                      fillcolor = palette_cpal_main[phase_cols[i]],\n                      type = 'scatter', \n                      mode = 'none')\n  } else {\n    POEarea <- POEarea %>%\n      add_trace(y = as.formula(paste0(\"~`\", phase_cols[i], \"`\")),\n                name = legend_name, \n                fill = 'tozeroy',\n                fillcolor = palette_cpal_main[phase_cols[i]])\n  }\n}\n\nPOEarea <- POEarea %>%\n  layout(title = \"\",\n         font = list(family = \"Poppins\"),\n         plot_bgcolor = \"rgba(0,0,0,0)\",\n         paper_bgcolor = \"rgba(0,0,0,0)\",\n         xaxis = list(title = \"\"),\n         yaxis = list(title = \"\",\n                      tickformat = \"0%\",\n                      range = c(0, 1))) %>%\n  add_segments(\n    x = min(df.phase.clinic$Date),\n    xend = max(df.phase.clinic$Date),\n    y = 0.9,\n    yend = 0.9,\n    line = list(dash = \"dash\", color = \"#2f2f2f\"),\n    inherit = FALSE,\n    showlegend = FALSE\n  ) %>%\n  add_annotations(\n    x = max(df.phase.clinic$Date),\n    y = 0.9,\n    text = \"<i>Goal</i>\",\n    showarrow = FALSE,\n    font = list(size = 12),\n    xanchor = 'left',\n    yanchor = 'middle'\n  ) %>% \n  config(displayModeBar = F)\n\n\n```\n\n<!--\nGenerate stacked bar chart that:\n - shows staffing levels for each role\n - shows vacancies\n PRODUCT: \"staffchart\"\n-->\n\n```{r staffchart, echo=FALSE, output=FALSE}\ncount_df$Role <- tools::toTitleCase(count_df$Role)\n\nstaffchart <- plot_ly(count_df, \n                      x = ~Active, \n                      y = ~Role, \n                      name = \"Active\", \n                      marker=list(color=cpaltemplates::palette_cpal_teal[6]), \n                      type = 'bar', \n                      hoverinfo = \"none\", \n                      orientation = 'h',\n                      text = ~Active,\n                      textposition = 'auto',\n                      insidetextanchor=\"middle\") %>%\n  add_trace(x = ~Temps,\n            y = ~Role,\n            name = \"Temporary/inactive\", \n            marker=list(color=cpaltemplates::palette_cpal_teal[3]),\n            text = ~Temps,\n            textposition = 'auto',\n            insidetextanchor=\"middle\") %>%\n  add_trace(x = ~Vacancies,\n            y = ~Role,\n            name = \"Vacant\", \n            marker=list(color=cpaltemplates::palette_cpal_red[3]),\n            text = ~Vacancies,\n            textposition = 'auto',\n            insidetextanchor=\"middle\") %>%\n  layout(font = list(family = \"Poppins\"),\n         plot_bgcolor = \"rgba(0,0,0,0)\",\n         paper_bgcolor = \"rgba(0,0,0,0)\",\n         yaxis = list(title = \"\",\n                      categoryorder = \"array\",\n                      categoryarray = c(\"Clerk\", \"Certifier\", \"Supervisor\"),\n                      automargin = TRUE,\n                      tickfont = list(size = 12),\n                      ticksuffix = \"   \"), # add 3 spaces after y-label\n         xaxis = list(title = \"\",\n                      gridwidth = 2,\n                      dtick = 1), \n         barmode = 'stack') %>% \n  config(displayModeBar = F)\n\n```\n\n<!--\n---CURRENTLY DEPRECATED---\nGenerate line chart that:\n - qualtrics\n PRODUCT: \"qual_chart\"\n-->\n\n```{r qualchart,  echo=FALSE, output=FALSE}\n\nqualchart = NULL\n\n# latest_df <- CSAT.charting %>% \n#   filter(pred == FALSE) %>%\n#   arrange(desc(Date)) %>%\n#   slice(1)\n# \n# CSAT_value <- latest_df$CSAT\n# \n# LA_CSAT_value <- latest_df$LA_CSAT\n# \n# current_month_CSAT <- CSAT.charting %>% \n#   filter((year(Date) == year(Sys.Date())) & (month(Date) == month(Sys.Date()))) %>%\n#   pull(CSAT)\n# \n# compare_df <- data.frame(\n#   Value = c(CSAT_value, LA_CSAT_value, current_month_CSAT),\n#   Label = c(\n#     paste(\"Customer satisfaction for\", format(latest_df$Date, \"%B %Y\")),\n#     \"Dallas County average\",\n#     \"Predicted score for this month\"\n#   ),\n#   Color = c(palette_cpal_main[1], palette_cpal_main[2], \"grey\"),\n#   X_position = c(1, 1.2, 1)\n# )\n# \n# compare_df$Color <- factor(compare_df$Color, labels = compare_df$Label)\n# \n# qual_chart <- ggplot(compare_df, aes(x = X_position, y = Value, color = Color)) +\n#   geom_segment(\n#     aes(x = 1, y = ifelse(Value[1] > Value[3], Value[1] - 0.003, Value[1] + 0.003), xend = 1, yend = ifelse(Value[1] > Value[3], Value[3] + 0.003, Value[1] - 0.003)),\n#     arrow = arrow(type = \"closed\", length = unit(0.1, \"inches\")),\n#     color = \"grey\", linewidth = 0.9, linetype = \"dashed\"\n#   ) +\n#   geom_point(size = 6) +\n#   scale_color_manual(values = c(palette_cpal_main[1], palette_cpal_main[2], \"grey\")) +\n#   coord_cartesian(xlim = c(0.9, 2)) +\n#   theme_light() +\n#   theme(\n#     plot.background = element_rect(fill = \"transparent\"),\n#     axis.ticks.x = element_blank(),\n#     axis.text.x = element_blank(),\n#     axis.title.x = element_blank(),\n#     axis.title.y = element_blank(),\n#     panel.grid.major = element_blank(),\n#     panel.grid.minor = element_blank(),\n#     axis.line = element_blank(),\n#     panel.border = element_blank(),\n#     text = element_text(size = 14)\n#   )\n\n# qualchart <- plot_ly(CSAT.clinic.recent, x = ~Date, y = ~delta, type = 'bar', hoverinfo = \"none\", \n#                marker = list(color = ~color)) %>% \n#         layout(plot_bgcolor = \"rgba(0,0,0,0)\",\n#                paper_bgcolor = \"rgba(0,0,0,0)\",\n#                yaxis = list(zeroline = TRUE, \n#                             zerolinecolor = 'black', \n#                             showticklabels = FALSE,\n#                             title = \"\",\n#                             range = c(-0.5, 0.5)\n#                             ), \n#                title = \"\",\n#                xaxis = list(title = \"Month\")\n#                ) %>%\n#         add_annotations(x = -0.075, y = 0, \n#                         text = \"average\", \n#                         showarrow = FALSE, \n#                         font = list(size = 12),\n#                         xref = 'paper',\n#                         yref = 'y'\n#                        ) %>%\n#         add_annotations(x = -0.05, y = 0.25, \n#                         text = \"better\", \n#                         showarrow = FALSE, \n#                         font = list(size = 12),\n#                         xref = 'paper',\n#                         yref = 'y',\n#                         textangle = -90\n#                        ) %>%\n#         add_annotations(x = -0.05, y = -0.25, \n#                         text = \"worse\", \n#                         showarrow = FALSE, \n#                         font = list(size = 12),\n#                         xref = 'paper',\n#                         yref = 'y',\n#                         textangle = -90\n#                        )\n\n# ggplotly(\n#   ggplot(CSAT.charting, aes(x = Date)) +\n#   geom_line(aes(y = LA_avg), linetype = \"dotted\", color = \"black\", linewidth = 1.25) +\n#   geom_line(aes(y = Average), color = \"blue\", linewidth = 1.25) +\n#   geom_segment(aes(xend = Date,\n#                  y = Average + delta,\n#                  yend = Average,\n#                  color = delta > 0),\n#              size = 1.5,\n#              linetype = \"dotted\",\n#              show.legend = FALSE) +\n#   geom_point(aes(x = Date,\n#                  y = Average + delta,\n#                  color = delta > 0),\n#              size = 4,\n#              show.legend = FALSE) +\n#   scale_color_manual(values = c(\"red\", \"green\")) +\n#   ylim(6, 7) +\n#   theme_minimal() +\n#   labs(x = \"Month\", y = \"CSAT Score\", color = \"CSAT above/below average\")\n# )\n\n# ggplot(CSAT.clinic.recent, aes(x = Date)) +\n#   geom_line(aes(y = LA_avg), linetype = \"dotted\", color = \"black\", size = 1.5) +\n#   geom_line(aes(y = Average), color = \"blue\", size= 1.5) +\n#   geom_line(aes(y = CSAT, group = 1, color = ifelse(CSAT > lag(CSAT), \"green\", \"red\")), size = 1.5) +\n#   ylim(6, 7) +\n#   scale_color_manual(values = c(\"red\", \"green\")) +\n#   theme_minimal() +\n#   labs(x = \"Month\", y = \"CSAT Score\", color = \"CSAT above/below average\")\n\n# ggplot(CSAT.charting, aes(x = Date)) +\n#   geom_smooth(aes(y = LA_avg, group = 1, color = ifelse(LA_avg > lag(LA_avg), \"#008097\", \"#E98816\")), linetype = \"dashed\", linewidth = 1.1) +\n#   geom_smooth(aes(y = Average), linewidth = 1.1, color = \"#008097\") +\n#   geom_segment(aes(xend = Date, \n#                    y = Average + delta,\n#                    yend = Average,\n#                    color = delta),\n#                size = 0.5,\n#                linetype = \"dotted\",\n#                show.legend = FALSE,) +\n#   geom_point(aes(x = Date, \n#                  y = Average + delta,\n#                  size = 5 * CSAT_n/max(CSAT_n)),\n#              color = \"#ffffff\",\n#              show.legend = FALSE) +\n#   geom_point(aes(x = Date, \n#                  y = Average + delta,\n#                  color = delta,\n#                  size = 4 * CSAT_n/max(CSAT_n)),\n#              show.legend = FALSE) +\n#   ylim(6, 7) +\n#   labs(x = \"Month\", y = \"CSAT Score\", color = \"CSAT above/below average\") +\n#   scale_color_gradientn(colors = cpaltemplates::palette_cpal_diverging) +\n#   theme(panel.background = element_rect(fill = \"transparent\", color = NA)) +\n#   guides(color = \"none\")\n\n```\n\n<!--\n################################################################################\nDASHBOARD LAYOUT TEMPLATE STARTS HERE\n-->\n\n```{=html}\n<div class=\"d-flex align-items-center\">\n    <div style=\"display: inline-block; border: 1px solid #2f2f2f; border-radius: 5px; padding: 10px; \">\n        \n        <div style=\"font-size: 2em; font-weight: bold; color: #2f2f2f; font-family: 'Poppins', sans-serif;\">\n            <i class=\"bi bi-person-fill mr-2\"></i>\n            `r params$manager_name`'s clinics\n        </div>\n        \n        <div style=\"font-size: 1em; color: #2f2f2f; font-family: 'Poppins', sans-serif; padding-top: 10px;\">\n            `r paste0(\"<a href='\", gsub(\" \", \"_\", clinic_names), \".html'>\", clinic_names, \"</a>\", collapse = \", \")`\n        </div>\n        \n        <div style=\"font-size: 1em; font-style: italic; color: #2f2f2f; font-family: 'Poppins', sans-serif; padding-top: 10px;\">\n            Number of `r ptcp %>% filter(Site %in% clinic_ids) %>% pull(Date) %>% max(na.rm = TRUE) %>% format(\"%B %Y\")` participants: <b>`r ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE), .groups = \"drop\") %>% filter(Date == ptcp %>% filter(Site %in% clinic_ids) %>% pull(Date) %>% max(na.rm = TRUE)) %>% pull(Participation) %>% sum() %>% format(big.mark = \",\")`</b>\n        </div>\n        \n    </div>\n</div>\n```\n\n## Clinic environment\n\n#### `r improvement_text`\n\n#### `r phase_text`\n\n`r POEarea`\n\n#### `r performance_text`\n\n`r POEradar`\n\n::: {.callout-tip}\n\n#### Phases and themes\n\nRead more about the goals that go into [phases](phases.html) and [themes](themes.html).\n:::\n\n## Staffing\n\n#### `r vacancy_text`\n\n`r staffchart`\n\n## Customer satisfaction\n\n- `r CSAT.text.clinic`\n\n- `r CSAT.text.agency`\n\n- `r CSAT.text.trend`\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":9,"fig-height":5,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"output-file":"dashboardManagerTemplate.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"../www/web_report.scss","anchor-sections":false,"title":"WIC Clinic Dashboard","title-block-banner":true,"message":false,"params":{"manager_name":"Ana"},"editor":"source"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}