select(-c("Date"))
### long form of themes for radar charts later
df.recent.themes.long <- df.recent.themes %>%
pivot_longer(cols = starts_with(c("Hospitality", "Communication", "Layout", "Efficiency", "Safety")),
names_to = "Theme",
values_to = "Value")
format(ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE)) %>% filter(Date == max(Date)) %>% pull(Date), "%B %Y")` participants: <b>`r ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE)) %>% filter(Date == max(Date)) %>% pull(Participation) %>% format(big.mark = ",")
format(ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE)) %>% filter(Date == max(Date)) %>% pull(Date), "%B %Y")
format(ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE)) %>% filter(Date == max(Date))
)
format(max_date <- ptcp %>% filter(Site %in% clinic_ids) %>% pull(Date) %>% max(na.rm = TRUE), "%B %Y")
ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE), .groups = "drop") %>% filter(Date == ptcp %>% filter(Site %in% clinic_ids) %>% pull(Date) %>% max(na.rm = TRUE)) %>% pull(Participation) %>% format(big.mark = ",")
ptcp %>% filter(Site %in% clinic_ids) %>% group_by(Date, Site) %>% summarize(Participation = mean(Participation, na.rm = TRUE), .groups = "drop") %>% filter(Date == ptcp %>% filter(Site %in% clinic_ids) %>% pull(Date) %>% max(na.rm = TRUE)) %>% pull(Participation) %>% sum() %>% format(big.mark = ",")
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("data/clinic_map.csv")
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("data/clinic_map.csv")
templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("data/clinic_map.csv")
# templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("data/scriptData/clinic_map.csv")
templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
# templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("data/scriptData/clinic_map.csv")
# templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("data/scriptData/clinic_map.csv")
# templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
for (file in files) {
file_name <- tools::file_path_sans_ext(file)
assign(file_name, read.csv(file = paste0("data/scriptData/", file)))
}
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
setwd("C:/Users/taylo/Documents/GitHub/wic-clinic-reports")
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("data/scriptData/clinic_map.csv")
# templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
for (file in files) {
file_name <- tools::file_path_sans_ext(file)
assign(file_name, read.csv(file = paste0("data/scriptData/", file)))
}
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
setwd("C:/Users/taylo/Documents/GitHub/wic-clinic-reports")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
setwd("C:/Users/taylo/Documents/GitHub/wic-clinic-reports")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
setwd("C:/Users/taylo/Documents/GitHub/wic-clinic-reports")
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "C:/Users/taylo/Documents/GitHub/wic-clinic-reports/data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "data/scriptData", pattern = "\\.csv$")
/
files <- list.files(path = "data/scriptData/", pattern = "\\.csv$")
files <- list.files(path = "C:/Users/taylo/Documents/GitHub/wic-clinic-reports/data/scriptData/", pattern = "\\.csv$")
for (file in files) {
file_name <- tools::file_path_sans_ext(file)
assign(file_name, read.csv(file = paste0("data/scriptData/", file)))
}
data_dir <- "C:/Users/taylo/Documents/GitHub/wic-clinic-reports/data/scriptData/"
files <- list.files(path = data_dir, pattern = "\\.csv$")
for (file in files) {
file_name <- tools::file_path_sans_ext(file)
assign(file_name, read.csv(file = paste0(data_dir, file)))
}
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/clinic_map.csv")
templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
for (goal_category in c("theme", "phase")) {
output_name <- gsub("\\W", "_", goal_category)
quarto::quarto_render(
input = paste0(templates, "dashboardGoals.qmd"),
output_file = paste0(output_name, "s.html"),
execute_params = list(goal_category = goal_category)
)
}
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/clinic_map.csv")
templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/clinic_map.csv")
templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/clinic_map.csv")
# templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
for (goal_category in c("theme", "phase")) {
output_name <- gsub("\\W", "_", goal_category)
quarto::quarto_render(
input = paste0(templates, "dashboardGoals.qmd"),
output_file = paste0(output_name, "s.html"),
execute_params = list(goal_category = goal_category)
)
}
for(clinic_name in clinic_map$Clinic){
output_name <- gsub("\\W", "_", clinic_name) # replace any non-alphanumeric characters with underscore
# navbar_links <- paste0(navbar_links,
#                        "    - text: \"", clinic_name,
#                        "\"\n      href: ", output_name, ".html\n")
quarto::quarto_render(
input = paste0(templates, "dashboardClinicTemplate.qmd"),
output_file = paste0(output_name, ".html"),
execute_params = list(clinic_name = clinic_name)
)
}
library(tidyverse)
library(googlesheets4)
library(tsutils)
library(plotly)
library(readxl)
library(glue)
library(stringr)
library(waffle)
library(forecast)
library(tsibble)
library(cpaltemplates)
clinic_name = params$clinic_name
data_dir <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/"
files <- list.files(path = data_dir, pattern = "\\.csv$")
for (file in files) {
file_name <- tools::file_path_sans_ext(file)
if (file_name == "ptcp") {
assign(gsub("__", "\\.", file_name), read_csv(file = paste0(data_dir, file)) %>%
rename(Date = colnames(.)[1]) %>%
mutate(Date = as.Date(Date)))
} else {
assign(gsub("__", "\\.", file_name), read_csv(file = paste0(data_dir, file)))
}
}
clinic_id = clinic_map %>%
filter(Clinic == clinic_name) %>%
pull(Site) %>%
as.character
## make sure poppins is installed locally
poppins_import()
set_cpal_defaults()
bold_color <- function(text, color) {
paste0("<b style='color:", color, "'>", text, "</b>")
}
# high performance threshold for POEs (90%)
threshold = 0.9
# fail threshold (50%)
fail = 0.5
# maximum acceptable num. families in waiting room at once
maxFamiliesWaiting = 8
# dynamic text prep
oxford_comma <- function(x) {
if (length(x) > 2) {
paste(paste(x[-length(x)], collapse=", "), "and", x[length(x)])
} else {
paste(x, collapse=" and ")
}
}
current_date <- Sys.Date()
current_year <- as.integer(format(Sys.Date(), "%Y"))
current_month <- as.integer(format(Sys.Date(), "%m"))
df.familiesWaiting <- df %>%
select(Site, Date, `# of Families Waiting`) %>%
rename(familiesWaiting = `# of Families Waiting`) %>%
drop_na()
df <- df %>%
mutate(`# of Families Waiting` = 1 / exp(`# of Families Waiting` / maxFamiliesWaiting))
df.phase <- df %>%
select(-Clinic, -Manager) %>%
group_by(Site) %>%
replace(is.na(.), 0) %>%
pivot_longer( cols = -c(1:2), names_to = "variable", values_to = "score") %>%
left_join(POE, by = "variable") %>%
group_by(Site, Date, phase) %>%
summarise(score = mean(score, na.rm = TRUE)) %>%
pivot_wider(names_from = phase, values_from = score) %>%
rename_with(~ifelse(grepl("^\\d+$", .), paste0("phase", .), .), -c(Site, Date))
df.grouped.long <- df %>%
select(-Clinic, -Manager) %>%
pivot_longer(
cols = -c(Site, Date),
names_to = "variable",
values_to = "value"
) %>%
merge(POE, by = "variable") %>%
group_by(Site, Date, category) %>%
summarise(Value = mean(value, na.rm = TRUE), .groups = "drop")
df.grouped <- df.grouped.long %>%
pivot_wider(
names_from = category,
values_from = Value
)
##  THEMES DF
df.themes.long <- df %>%
select(-Clinic, -Manager) %>%
pivot_longer(
cols = -c(Site, Date),
names_to = "variable",
values_to = "value"
) %>%
merge(POE, by = "variable") %>%
group_by(Site, Date, theme) %>%
summarise(Value = mean(value, na.rm = TRUE), .groups = "drop")
df.themes <- df.themes.long %>%
pivot_wider(
names_from = theme,
values_from = Value
)
##  DETAILED RECENT SNAPSHOT
df.recent <- df %>%
group_by(Site) %>%
slice(which.max(Date)) %>%
select(-c("Date"))
##  GROUPED RECENT SNAPSHOT
df.recent.grouped <- df.grouped %>%
group_by(Site) %>%
slice(which.max(Date)) %>%
select(-c("Date"))
##  THEMED RECENT SNAPSHOT
df.recent.themes <- df.themes %>%
group_by(Site) %>%
slice(which.max(Date)) %>%
select(-c("Date"))
### long form of themes for radar charts later
df.recent.themes.long <- df.recent.themes %>%
pivot_longer(cols = starts_with(c("Hospitality", "Communication", "Layout", "Efficiency", "Safety")),
names_to = "Theme",
values_to = "Value")
df.phase.clinic <- df.phase %>%
# ungroup() %>%
# mutate_if(is.numeric, ~./(ncol(.) - 2)) %>%
filter(Site == clinic_id)
phase_eval <- df.phase.clinic %>%
filter(Date == max(df.phase.clinic$Date)) %>%
ungroup() %>% select(-c(Site, Date)) %>%
gather(key = "phase", value = "metric") %>%
mutate(phase = gsub("(phase)(\\d+)", "Phase \\2", phase),
evaluation = if_else(metric > threshold,
"fulfilled",
"not_fulfilled"))
# create grouped phase strings
phase_eval.strong <- phase_eval %>% filter(evaluation == "fulfilled") %>% mutate(colored_phase = paste0("<span style='color:", palette_cpal_main[stringr::str_remove(phase, "Phase ")],"'>", phase, "</span>")) %>% pull(colored_phase) %>% paste(collapse = ", ")
phase_eval.weak <- phase_eval %>% filter(evaluation == "not_fulfilled") %>% mutate(colored_phase = paste0("<span style='color:", palette_cpal_main[stringr::str_remove(phase, "Phase ")],"'>", phase, "</span>")) %>% pull(colored_phase) %>% paste(collapse = ", ")
# Use your oxford_comma function to make it look better
phase_eval.strong <- oxford_comma(strsplit(phase_eval.strong, ", ")[[1]])
phase_eval.weak <- oxford_comma(strsplit(phase_eval.weak, ", ")[[1]])
phase_text <- paste(if (nchar(phase_eval.strong) > 0)
paste0("Nice job getting ", phase_eval.strong, " fulfillment above ", "<span style='color:#2f2f2f'>", sprintf("%.f%%", threshold*100), "</span>", "!"),
if (nchar(phase_eval.weak) > 0)
paste0("Work on getting ", phase_eval.weak, " targets up."))
df.recent.long <- df.recent %>%
select(-Clinic, -Manager) %>%
pivot_longer(cols = -c(1),
names_to = "variable",
values_to = "Value") %>%
merge(POE, by = "variable") %>%
select(Site, Value, improvement_phrase, phase)
df.clinic_fails <- df.recent.long %>%
filter(Site == clinic_id, Value < fail)
fail_count <- df.clinic_fails %>%
count(phase) %>%
mutate(name = paste0("Phase ", phase),
color = palette_cpal_main[phase],
message = glue_col("{n} items in <span style='color:{color}'>{name}</span>")) %>%
pull(message)
fail_count_string <- paste(fail_count, collapse = ", ")
if(length(fail_count) > 1) {
fail_count_string <- stringr::str_replace(fail_count_string, "\\,(?=[^,]*$)", " and")
}
improves <- df.clinic_fails %>%
{ if(nrow(.) > 5)
slice_sample(., n = 5)
else
.
} %>% pull(improvement_phrase)
improvements_string <- paste0("\n\n - ", paste(improves, collapse = "\n\n - "))
improvement_text <- knitr::asis_output(glue(
"The {clinic_name} clinic has {knitr::asis_output(fail_count_string)} that need improvement.
{if (length(improves) > 0) {
paste('Here are some goals to focus on:', improvements_string)
} else {
'Wonderful work! You are a WIC superstar!'
}}"
))
df.recent.themes.long.filtered <- df.recent.themes.long %>% filter(Site == clinic_id)
performance_text <- paste(
if_else(length(strong_themes <- df.recent.themes.long.filtered %>% filter(Value > threshold) %>% pull(Theme) %>% tolower()) > 0,
paste0("The ", clinic_name, " clinic is strong in ", oxford_comma(strong_themes), "."),
""),
if_else(length(weak_themes <- df.recent.themes.long.filtered %>% filter(Value < fail) %>% pull(Theme) %>% tolower()) > 0,
paste0("Focus on improving clinic ", oxford_comma(weak_themes), "."),
"There aren't any particularly weak areas—keep up the good work!")
)
summarize_role <- function(df, clinic_id, role) {
df %>%
filter(Site == clinic_id, Role == role) %>%
summarize(
Vacancies = sum(Vacant == "TRUE", na.rm = TRUE),
Temps = sum(`In training` == "TRUE" | `Temp` == "TRUE" | `Part-time` == "TRUE" | `On leave` == "TRUE", na.rm = TRUE),
`WCS trainees` = sum(`WCS trainee` == "TRUE", na.rm = TRUE),
Active = n() - Vacancies - Temps,
Role = role
)
}
roles <- c("clerk", "certifier", "supervisor")
count_df <- purrr::map_dfr(roles, summarize_role, df = staff, clinic_id = clinic_id)
create_vacancy_sentence <- function(df) {
if (!any(df$Vacancies > 0)) {
return("There are no vacancies right now. Nice job!")
}
vacancy_df <- df %>%
filter(Vacancies > 0) %>%
mutate(
RolePlural = ifelse(Vacancies > 1, paste0(Role, "s"), Role),
RoleSentence = paste(Vacancies, RolePlural, "and")
) %>%
summarise(vacancy_sentence = stringr::str_c(RoleSentence, collapse = " ")) %>%
mutate(vacancy_sentence = stringr::str_remove(vacancy_sentence, " and$"))
vacancy_sentence <- stringr::str_glue("Consider hiring {vacancy_df$vacancy_sentence} to meet staffing needs.")
return(vacancy_sentence)
}
vacancy_text <- create_vacancy_sentence(count_df)
CSAT.integrated <- CSAT %>%
drop_na() %>%
bind_rows(CSAT.predict) %>%
arrange(Site, Date) %>%
mutate(Date = floor_date(Date, "month"),
`CSAT Points` = ifelse(is.na(`CSAT Points`), CSAT * `CSAT (n)`, `CSAT Points`)
) %>%
group_by(Site) %>%
do({
firstP = first(.$`Running CSAT Points`)
firstn = first(.$`Running CSAT n`)
mutate(., `Running CSAT Points` = firstP + cumsum(`CSAT Points`),
`Running CSAT n` = firstn + cumsum(`CSAT (n)`),)
}) %>%
mutate(`Running CSAT Average` = `Running CSAT Points` / `Running CSAT n`)
View(CSAT)
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/clinic_map.csv")
# templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
for (goal_category in c("theme", "phase")) {
output_name <- gsub("\\W", "_", goal_category)
quarto::quarto_render(
input = paste0(templates, "dashboardGoals.qmd"),
output_file = paste0(output_name, "s.html"),
execute_params = list(goal_category = goal_category)
)
}
for(clinic_name in clinic_map$Clinic){
output_name <- gsub("\\W", "_", clinic_name) # replace any non-alphanumeric characters with underscore
# navbar_links <- paste0(navbar_links,
#                        "    - text: \"", clinic_name,
#                        "\"\n      href: ", output_name, ".html\n")
quarto::quarto_render(
input = paste0(templates, "dashboardClinicTemplate.qmd"),
output_file = paste0(output_name, ".html"),
execute_params = list(clinic_name = clinic_name)
)
}
for(manager_name in unique(clinic_map$Manager)){
output_name <- gsub("\\W", "", manager_name) # replace any non-alphanumeric characters with underscore
# navbar_links <- paste0(navbar_links,
#                        "    - text: \"", clinic_name,
#                        "\"\n      href: ", output_name, "_clinics.html\n")
quarto::quarto_render(
input = paste0(templates, "dashboardManagerTemplate.qmd"),
output_file = paste0(output_name, "_clinics.html"),
execute_params = list(manager_name = manager_name)
)
}
# This is a parent function used to generate Quarto templates calling:
# - "dashboardClinicTemplate.qmd"
# - "dashboardManagerTemplate.qmd"
# - "dashboardHome.qmd"
# - "dashboardGoals.qmd"
clinic_map <- readr::read_csv("C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/data/scriptData/clinic_map.csv")
# templates <- "C:/Users/taylo/CPAL Dropbox/Benefits Delivery/04_Projects/WIC/WIC Dashboards/templates/"
templates <- "templates/"
quarto::quarto_render(
input = paste0(templates, "dashboardHome.qmd"),
output_file = "home.html"
)
for (goal_category in c("theme", "phase")) {
output_name <- gsub("\\W", "_", goal_category)
quarto::quarto_render(
input = paste0(templates, "dashboardGoals.qmd"),
output_file = paste0(output_name, "s.html"),
execute_params = list(goal_category = goal_category)
)
}
for(clinic_name in clinic_map$Clinic){
output_name <- gsub("\\W", "_", clinic_name) # replace any non-alphanumeric characters with underscore
# navbar_links <- paste0(navbar_links,
#                        "    - text: \"", clinic_name,
#                        "\"\n      href: ", output_name, ".html\n")
quarto::quarto_render(
input = paste0(templates, "dashboardClinicTemplate.qmd"),
output_file = paste0(output_name, ".html"),
execute_params = list(clinic_name = clinic_name)
)
}
for(manager_name in unique(clinic_map$Manager)){
output_name <- gsub("\\W", "", manager_name) # replace any non-alphanumeric characters with underscore
# navbar_links <- paste0(navbar_links,
#                        "    - text: \"", clinic_name,
#                        "\"\n      href: ", output_name, "_clinics.html\n")
quarto::quarto_render(
input = paste0(templates, "dashboardManagerTemplate.qmd"),
output_file = paste0(output_name, "_clinics.html"),
execute_params = list(manager_name = manager_name)
)
}
